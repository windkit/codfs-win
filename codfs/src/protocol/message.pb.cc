// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ncvfs {

namespace {

const ::google::protobuf::Descriptor* HandshakeRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeRequestPro_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HandshakeRequestPro_ComponentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HandshakeReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandshakeReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffsetLengthPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffsetLengthPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataMsgPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataMsgPro_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataMsgPro_DataMsgType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ListDirectoryRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFileRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFileRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveSegmentListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveSegmentListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFileSizeRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFileSizeRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentIdListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentIdListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitRequestPro_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PutSegmentInitRequestPro_CodingScheme_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SegmentDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentTransferEndRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentTransferEndRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSmallSegmentRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSmallSegmentRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOsdListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOsdListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListDirectoryReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListDirectoryReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileInfoPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfoPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockLocationPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockLocationPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadFileReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFileReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameFileReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveSegmentListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveSegmentListReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadFileReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadFileReplyPro_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DownloadFileReplyPro_FileType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentIdListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentIdListReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchPrimaryOsdReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchPrimaryOsdReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadSegmentAckReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadSegmentAckReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentInfoReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentInfoReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimaryListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrimaryListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentLocationPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentLocationPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryTriggerReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryTriggerReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadSegmentAckPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadSegmentAckPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSegmentInfoRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSegmentInfoRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutSegmentInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutSegmentInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentTransferEndReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentTransferEndReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutBlockInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutBlockInitRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockDataPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockDataPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockTransferEndRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockTransferEndRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutBlockInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutBlockInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockTransferEndReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockTransferEndReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlockInitRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlockInitRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlockInitReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlockInitReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStartupPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStartupPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdShutdownPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdShutdownPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStatUpdateReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStatUpdateReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSecondaryListRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSecondaryListRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OsdStatUpdateRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OsdStatUpdateRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSecondaryListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSecondaryListReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewOsdRegisterPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewOsdRegisterPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineOsdPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineOsdPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineOsdListPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineOsdListPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOsdStatusRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOsdStatusRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOsdStatusReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOsdStatusReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepairSegmentInfoPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepairSegmentInfoPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPrimaryListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPrimaryListReplyPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoveryTriggerRequestPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoveryTriggerRequestPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOsdListReplyPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOsdListReplyPro_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  HandshakeRequestPro_descriptor_ = file->message_type(0);
  static const int HandshakeRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, componenttype_),
  };
  HandshakeRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeRequestPro_descriptor_,
      HandshakeRequestPro::default_instance_,
      HandshakeRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeRequestPro));
  HandshakeRequestPro_ComponentType_descriptor_ = HandshakeRequestPro_descriptor_->enum_type(0);
  HandshakeReplyPro_descriptor_ = file->message_type(1);
  static const int HandshakeReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, componenttype_),
  };
  HandshakeReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandshakeReplyPro_descriptor_,
      HandshakeReplyPro::default_instance_,
      HandshakeReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandshakeReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandshakeReplyPro));
  OffsetLengthPro_descriptor_ = file->message_type(2);
  static const int OffsetLengthPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetLengthPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetLengthPro, length_),
  };
  OffsetLengthPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OffsetLengthPro_descriptor_,
      OffsetLengthPro::default_instance_,
      OffsetLengthPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetLengthPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetLengthPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OffsetLengthPro));
  DataMsgPro_descriptor_ = file->message_type(3);
  static const int DataMsgPro_offsets_[1] = {
  };
  DataMsgPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataMsgPro_descriptor_,
      DataMsgPro::default_instance_,
      DataMsgPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsgPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMsgPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataMsgPro));
  DataMsgPro_DataMsgType_descriptor_ = DataMsgPro_descriptor_->enum_type(0);
  ListDirectoryRequestPro_descriptor_ = file->message_type(4);
  static const int ListDirectoryRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, directorypath_),
  };
  ListDirectoryRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryRequestPro_descriptor_,
      ListDirectoryRequestPro::default_instance_,
      ListDirectoryRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryRequestPro));
  UploadFileRequestPro_descriptor_ = file->message_type(5);
  static const int UploadFileRequestPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, numofobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, path_),
  };
  UploadFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileRequestPro_descriptor_,
      UploadFileRequestPro::default_instance_,
      UploadFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileRequestPro));
  DeleteFileRequestPro_descriptor_ = file->message_type(6);
  static const int DeleteFileRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequestPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequestPro, path_),
  };
  DeleteFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFileRequestPro_descriptor_,
      DeleteFileRequestPro::default_instance_,
      DeleteFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFileRequestPro));
  RenameFileRequestPro_descriptor_ = file->message_type(7);
  static const int RenameFileRequestPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileRequestPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileRequestPro, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileRequestPro, newpath_),
  };
  RenameFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameFileRequestPro_descriptor_,
      RenameFileRequestPro::default_instance_,
      RenameFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameFileRequestPro));
  DownloadFileRequestPro_descriptor_ = file->message_type(8);
  static const int DownloadFileRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, filepath_),
  };
  DownloadFileRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFileRequestPro_descriptor_,
      DownloadFileRequestPro::default_instance_,
      DownloadFileRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFileRequestPro));
  SaveSegmentListRequestPro_descriptor_ = file->message_type(9);
  static const int SaveSegmentListRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListRequestPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListRequestPro, segmentlist_),
  };
  SaveSegmentListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveSegmentListRequestPro_descriptor_,
      SaveSegmentListRequestPro::default_instance_,
      SaveSegmentListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveSegmentListRequestPro));
  SetFileSizeRequestPro_descriptor_ = file->message_type(10);
  static const int SetFileSizeRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFileSizeRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFileSizeRequestPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFileSizeRequestPro, filesize_),
  };
  SetFileSizeRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFileSizeRequestPro_descriptor_,
      SetFileSizeRequestPro::default_instance_,
      SetFileSizeRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFileSizeRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFileSizeRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFileSizeRequestPro));
  GetSegmentIdListRequestPro_descriptor_ = file->message_type(11);
  static const int GetSegmentIdListRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListRequestPro, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListRequestPro, numofobjs_),
  };
  GetSegmentIdListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentIdListRequestPro_descriptor_,
      GetSegmentIdListRequestPro::default_instance_,
      GetSegmentIdListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentIdListRequestPro));
  PutSegmentInitRequestPro_descriptor_ = file->message_type(12);
  static const int PutSegmentInitRequestPro_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, segmentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, chunkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, codingsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, updatekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, buffersize_),
  };
  PutSegmentInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitRequestPro_descriptor_,
      PutSegmentInitRequestPro::default_instance_,
      PutSegmentInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitRequestPro));
  PutSegmentInitRequestPro_CodingScheme_descriptor_ = PutSegmentInitRequestPro_descriptor_->enum_type(0);
  SegmentDataPro_descriptor_ = file->message_type(13);
  static const int SegmentDataPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, updatekey_),
  };
  SegmentDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentDataPro_descriptor_,
      SegmentDataPro::default_instance_,
      SegmentDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentDataPro));
  GetSegmentRequestPro_descriptor_ = file->message_type(14);
  static const int GetSegmentRequestPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentRequestPro, segmentid_),
  };
  GetSegmentRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentRequestPro_descriptor_,
      GetSegmentRequestPro::default_instance_,
      GetSegmentRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentRequestPro));
  SegmentTransferEndRequestPro_descriptor_ = file->message_type(15);
  static const int SegmentTransferEndRequestPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, updatekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, offsetlength_),
  };
  SegmentTransferEndRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentTransferEndRequestPro_descriptor_,
      SegmentTransferEndRequestPro::default_instance_,
      SegmentTransferEndRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentTransferEndRequestPro));
  PutSmallSegmentRequestPro_descriptor_ = file->message_type(16);
  static const int PutSmallSegmentRequestPro_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, segmentsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, codingsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, updatekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, buffersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, offsetlength_),
  };
  PutSmallSegmentRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSmallSegmentRequestPro_descriptor_,
      PutSmallSegmentRequestPro::default_instance_,
      PutSmallSegmentRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSmallSegmentRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSmallSegmentRequestPro));
  GetOsdListRequestPro_descriptor_ = file->message_type(17);
  static const int GetOsdListRequestPro_offsets_[1] = {
  };
  GetOsdListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOsdListRequestPro_descriptor_,
      GetOsdListRequestPro::default_instance_,
      GetOsdListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOsdListRequestPro));
  ListDirectoryReplyPro_descriptor_ = file->message_type(18);
  static const int ListDirectoryReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, fileinfopro_),
  };
  ListDirectoryReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListDirectoryReplyPro_descriptor_,
      ListDirectoryReplyPro::default_instance_,
      ListDirectoryReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDirectoryReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListDirectoryReplyPro));
  FileInfoPro_descriptor_ = file->message_type(19);
  static const int FileInfoPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, filename_),
  };
  FileInfoPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfoPro_descriptor_,
      FileInfoPro::default_instance_,
      FileInfoPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfoPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfoPro));
  BlockLocationPro_descriptor_ = file->message_type(20);
  static const int BlockLocationPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationPro, blockid_),
  };
  BlockLocationPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockLocationPro_descriptor_,
      BlockLocationPro::default_instance_,
      BlockLocationPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLocationPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockLocationPro));
  UploadFileReplyPro_descriptor_ = file->message_type(21);
  static const int UploadFileReplyPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, segmentlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, primarylist_),
  };
  UploadFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadFileReplyPro_descriptor_,
      UploadFileReplyPro::default_instance_,
      UploadFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadFileReplyPro));
  DeleteFileReplyPro_descriptor_ = file->message_type(22);
  static const int DeleteFileReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReplyPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReplyPro, path_),
  };
  DeleteFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFileReplyPro_descriptor_,
      DeleteFileReplyPro::default_instance_,
      DeleteFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFileReplyPro));
  RenameFileReplyPro_descriptor_ = file->message_type(23);
  static const int RenameFileReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileReplyPro, fileid_),
  };
  RenameFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameFileReplyPro_descriptor_,
      RenameFileReplyPro::default_instance_,
      RenameFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameFileReplyPro));
  SaveSegmentListReplyPro_descriptor_ = file->message_type(24);
  static const int SaveSegmentListReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListReplyPro, fileid_),
  };
  SaveSegmentListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveSegmentListReplyPro_descriptor_,
      SaveSegmentListReplyPro::default_instance_,
      SaveSegmentListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveSegmentListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveSegmentListReplyPro));
  DownloadFileReplyPro_descriptor_ = file->message_type(25);
  static const int DownloadFileReplyPro_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, segmentlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, primarylist_),
  };
  DownloadFileReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadFileReplyPro_descriptor_,
      DownloadFileReplyPro::default_instance_,
      DownloadFileReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadFileReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadFileReplyPro));
  DownloadFileReplyPro_FileType_descriptor_ = DownloadFileReplyPro_descriptor_->enum_type(0);
  GetSegmentIdListReplyPro_descriptor_ = file->message_type(26);
  static const int GetSegmentIdListReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListReplyPro, segmentidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListReplyPro, primarylist_),
  };
  GetSegmentIdListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentIdListReplyPro_descriptor_,
      GetSegmentIdListReplyPro::default_instance_,
      GetSegmentIdListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentIdListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentIdListReplyPro));
  SwitchPrimaryOsdReplyPro_descriptor_ = file->message_type(27);
  static const int SwitchPrimaryOsdReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPrimaryOsdReplyPro, newprimaryosdid_),
  };
  SwitchPrimaryOsdReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchPrimaryOsdReplyPro_descriptor_,
      SwitchPrimaryOsdReplyPro::default_instance_,
      SwitchPrimaryOsdReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPrimaryOsdReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchPrimaryOsdReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchPrimaryOsdReplyPro));
  UploadSegmentAckReplyPro_descriptor_ = file->message_type(28);
  static const int UploadSegmentAckReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckReplyPro, segmentid_),
  };
  UploadSegmentAckReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadSegmentAckReplyPro_descriptor_,
      UploadSegmentAckReplyPro::default_instance_,
      UploadSegmentAckReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadSegmentAckReplyPro));
  GetSegmentInfoReplyPro_descriptor_ = file->message_type(29);
  static const int GetSegmentInfoReplyPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, nodelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, codingsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, segmentsize_),
  };
  GetSegmentInfoReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentInfoReplyPro_descriptor_,
      GetSegmentInfoReplyPro::default_instance_,
      GetSegmentInfoReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentInfoReplyPro));
  GetPrimaryListRequestPro_descriptor_ = file->message_type(30);
  static const int GetPrimaryListRequestPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, numofobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, primarylist_),
  };
  GetPrimaryListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrimaryListRequestPro_descriptor_,
      GetPrimaryListRequestPro::default_instance_,
      GetPrimaryListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrimaryListRequestPro));
  SegmentLocationPro_descriptor_ = file->message_type(31);
  static const int SegmentLocationPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, primaryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, osdlist_),
  };
  SegmentLocationPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentLocationPro_descriptor_,
      SegmentLocationPro::default_instance_,
      SegmentLocationPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentLocationPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentLocationPro));
  RecoveryTriggerReplyPro_descriptor_ = file->message_type(32);
  static const int RecoveryTriggerReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerReplyPro, segmentlocations_),
  };
  RecoveryTriggerReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryTriggerReplyPro_descriptor_,
      RecoveryTriggerReplyPro::default_instance_,
      RecoveryTriggerReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryTriggerReplyPro));
  UploadSegmentAckPro_descriptor_ = file->message_type(33);
  static const int UploadSegmentAckPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, codingsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, nodelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, segmentsize_),
  };
  UploadSegmentAckPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadSegmentAckPro_descriptor_,
      UploadSegmentAckPro::default_instance_,
      UploadSegmentAckPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSegmentAckPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadSegmentAckPro));
  GetSegmentInfoRequestPro_descriptor_ = file->message_type(34);
  static const int GetSegmentInfoRequestPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoRequestPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoRequestPro, needreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoRequestPro, isrecovery_),
  };
  GetSegmentInfoRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSegmentInfoRequestPro_descriptor_,
      GetSegmentInfoRequestPro::default_instance_,
      GetSegmentInfoRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSegmentInfoRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSegmentInfoRequestPro));
  PutSegmentInitReplyPro_descriptor_ = file->message_type(35);
  static const int PutSegmentInitReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, datamsgtype_),
  };
  PutSegmentInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutSegmentInitReplyPro_descriptor_,
      PutSegmentInitReplyPro::default_instance_,
      PutSegmentInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutSegmentInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutSegmentInitReplyPro));
  SegmentTransferEndReplyPro_descriptor_ = file->message_type(36);
  static const int SegmentTransferEndReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, issmallsegment_),
  };
  SegmentTransferEndReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentTransferEndReplyPro_descriptor_,
      SegmentTransferEndReplyPro::default_instance_,
      SegmentTransferEndReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentTransferEndReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentTransferEndReplyPro));
  PutBlockInitRequestPro_descriptor_ = file->message_type(37);
  static const int PutBlockInitRequestPro_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, chunkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, updatekey_),
  };
  PutBlockInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutBlockInitRequestPro_descriptor_,
      PutBlockInitRequestPro::default_instance_,
      PutBlockInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutBlockInitRequestPro));
  BlockDataPro_descriptor_ = file->message_type(38);
  static const int BlockDataPro_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, updatekey_),
  };
  BlockDataPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockDataPro_descriptor_,
      BlockDataPro::default_instance_,
      BlockDataPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockDataPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockDataPro));
  BlockTransferEndRequestPro_descriptor_ = file->message_type(39);
  static const int BlockTransferEndRequestPro_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, updatekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, offsetlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, blocklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, codingscheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, codingsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, segmentsize_),
  };
  BlockTransferEndRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockTransferEndRequestPro_descriptor_,
      BlockTransferEndRequestPro::default_instance_,
      BlockTransferEndRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockTransferEndRequestPro));
  PutBlockInitReplyPro_descriptor_ = file->message_type(40);
  static const int PutBlockInitReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitReplyPro, blockid_),
  };
  PutBlockInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutBlockInitReplyPro_descriptor_,
      PutBlockInitReplyPro::default_instance_,
      PutBlockInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutBlockInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutBlockInitReplyPro));
  BlockTransferEndReplyPro_descriptor_ = file->message_type(41);
  static const int BlockTransferEndReplyPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndReplyPro, blockid_),
  };
  BlockTransferEndReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockTransferEndReplyPro_descriptor_,
      BlockTransferEndReplyPro::default_instance_,
      BlockTransferEndReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockTransferEndReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockTransferEndReplyPro));
  GetBlockInitRequestPro_descriptor_ = file->message_type(42);
  static const int GetBlockInitRequestPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, offsetlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, datamsgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, isparity_),
  };
  GetBlockInitRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlockInitRequestPro_descriptor_,
      GetBlockInitRequestPro::default_instance_,
      GetBlockInitRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlockInitRequestPro));
  GetBlockInitReplyPro_descriptor_ = file->message_type(43);
  static const int GetBlockInitReplyPro_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitReplyPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitReplyPro, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitReplyPro, blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitReplyPro, chunkcount_),
  };
  GetBlockInitReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlockInitReplyPro_descriptor_,
      GetBlockInitReplyPro::default_instance_,
      GetBlockInitReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockInitReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlockInitReplyPro));
  OsdStartupPro_descriptor_ = file->message_type(44);
  static const int OsdStartupPro_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdloading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, osdport_),
  };
  OsdStartupPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStartupPro_descriptor_,
      OsdStartupPro::default_instance_,
      OsdStartupPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStartupPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStartupPro));
  OsdShutdownPro_descriptor_ = file->message_type(45);
  static const int OsdShutdownPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdShutdownPro, osdid_),
  };
  OsdShutdownPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdShutdownPro_descriptor_,
      OsdShutdownPro::default_instance_,
      OsdShutdownPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdShutdownPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdShutdownPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdShutdownPro));
  OsdStatUpdateReplyPro_descriptor_ = file->message_type(46);
  static const int OsdStatUpdateReplyPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, osdcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, osdloading_),
  };
  OsdStatUpdateReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStatUpdateReplyPro_descriptor_,
      OsdStatUpdateReplyPro::default_instance_,
      OsdStatUpdateReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStatUpdateReplyPro));
  GetSecondaryListRequestPro_descriptor_ = file->message_type(47);
  static const int GetSecondaryListRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, numofsegs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, primaryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, blocksize_),
  };
  GetSecondaryListRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSecondaryListRequestPro_descriptor_,
      GetSecondaryListRequestPro::default_instance_,
      GetSecondaryListRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSecondaryListRequestPro));
  OsdStatUpdateRequestPro_descriptor_ = file->message_type(48);
  static const int OsdStatUpdateRequestPro_offsets_[1] = {
  };
  OsdStatUpdateRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OsdStatUpdateRequestPro_descriptor_,
      OsdStatUpdateRequestPro::default_instance_,
      OsdStatUpdateRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OsdStatUpdateRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OsdStatUpdateRequestPro));
  GetSecondaryListReplyPro_descriptor_ = file->message_type(49);
  static const int GetSecondaryListReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListReplyPro, secondarylist_),
  };
  GetSecondaryListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSecondaryListReplyPro_descriptor_,
      GetSecondaryListReplyPro::default_instance_,
      GetSecondaryListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSecondaryListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSecondaryListReplyPro));
  NewOsdRegisterPro_descriptor_ = file->message_type(50);
  static const int NewOsdRegisterPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOsdRegisterPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOsdRegisterPro, osdip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOsdRegisterPro, osdport_),
  };
  NewOsdRegisterPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewOsdRegisterPro_descriptor_,
      NewOsdRegisterPro::default_instance_,
      NewOsdRegisterPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOsdRegisterPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOsdRegisterPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewOsdRegisterPro));
  OnlineOsdPro_descriptor_ = file->message_type(51);
  static const int OnlineOsdPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdPro, osdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdPro, osdip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdPro, osdport_),
  };
  OnlineOsdPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineOsdPro_descriptor_,
      OnlineOsdPro::default_instance_,
      OnlineOsdPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineOsdPro));
  OnlineOsdListPro_descriptor_ = file->message_type(52);
  static const int OnlineOsdListPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdListPro, onlineosdlist_),
  };
  OnlineOsdListPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineOsdListPro_descriptor_,
      OnlineOsdListPro::default_instance_,
      OnlineOsdListPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdListPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineOsdListPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineOsdListPro));
  GetOsdStatusRequestPro_descriptor_ = file->message_type(53);
  static const int GetOsdStatusRequestPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdStatusRequestPro, osdids_),
  };
  GetOsdStatusRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOsdStatusRequestPro_descriptor_,
      GetOsdStatusRequestPro::default_instance_,
      GetOsdStatusRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdStatusRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdStatusRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOsdStatusRequestPro));
  GetOsdStatusReplyPro_descriptor_ = file->message_type(54);
  static const int GetOsdStatusReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdStatusReplyPro, osdstatus_),
  };
  GetOsdStatusReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOsdStatusReplyPro_descriptor_,
      GetOsdStatusReplyPro::default_instance_,
      GetOsdStatusReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdStatusReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdStatusReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOsdStatusReplyPro));
  RepairSegmentInfoPro_descriptor_ = file->message_type(55);
  static const int RepairSegmentInfoPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepairSegmentInfoPro, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepairSegmentInfoPro, deadblockids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepairSegmentInfoPro, newosdids_),
  };
  RepairSegmentInfoPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepairSegmentInfoPro_descriptor_,
      RepairSegmentInfoPro::default_instance_,
      RepairSegmentInfoPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepairSegmentInfoPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepairSegmentInfoPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepairSegmentInfoPro));
  GetPrimaryListReplyPro_descriptor_ = file->message_type(56);
  static const int GetPrimaryListReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListReplyPro, primarylist_),
  };
  GetPrimaryListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPrimaryListReplyPro_descriptor_,
      GetPrimaryListReplyPro::default_instance_,
      GetPrimaryListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPrimaryListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPrimaryListReplyPro));
  RecoveryTriggerRequestPro_descriptor_ = file->message_type(57);
  static const int RecoveryTriggerRequestPro_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerRequestPro, osdlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerRequestPro, dstosdlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerRequestPro, dstspecified_),
  };
  RecoveryTriggerRequestPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoveryTriggerRequestPro_descriptor_,
      RecoveryTriggerRequestPro::default_instance_,
      RecoveryTriggerRequestPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerRequestPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoveryTriggerRequestPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoveryTriggerRequestPro));
  GetOsdListReplyPro_descriptor_ = file->message_type(58);
  static const int GetOsdListReplyPro_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdListReplyPro, onlineosdlist_),
  };
  GetOsdListReplyPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOsdListReplyPro_descriptor_,
      GetOsdListReplyPro::default_instance_,
      GetOsdListReplyPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdListReplyPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOsdListReplyPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOsdListReplyPro));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeRequestPro_descriptor_, &HandshakeRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandshakeReplyPro_descriptor_, &HandshakeReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OffsetLengthPro_descriptor_, &OffsetLengthPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataMsgPro_descriptor_, &DataMsgPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryRequestPro_descriptor_, &ListDirectoryRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileRequestPro_descriptor_, &UploadFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFileRequestPro_descriptor_, &DeleteFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameFileRequestPro_descriptor_, &RenameFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFileRequestPro_descriptor_, &DownloadFileRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveSegmentListRequestPro_descriptor_, &SaveSegmentListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFileSizeRequestPro_descriptor_, &SetFileSizeRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentIdListRequestPro_descriptor_, &GetSegmentIdListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitRequestPro_descriptor_, &PutSegmentInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentDataPro_descriptor_, &SegmentDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentRequestPro_descriptor_, &GetSegmentRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentTransferEndRequestPro_descriptor_, &SegmentTransferEndRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSmallSegmentRequestPro_descriptor_, &PutSmallSegmentRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOsdListRequestPro_descriptor_, &GetOsdListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListDirectoryReplyPro_descriptor_, &ListDirectoryReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfoPro_descriptor_, &FileInfoPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockLocationPro_descriptor_, &BlockLocationPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadFileReplyPro_descriptor_, &UploadFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFileReplyPro_descriptor_, &DeleteFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameFileReplyPro_descriptor_, &RenameFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveSegmentListReplyPro_descriptor_, &SaveSegmentListReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadFileReplyPro_descriptor_, &DownloadFileReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentIdListReplyPro_descriptor_, &GetSegmentIdListReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchPrimaryOsdReplyPro_descriptor_, &SwitchPrimaryOsdReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadSegmentAckReplyPro_descriptor_, &UploadSegmentAckReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentInfoReplyPro_descriptor_, &GetSegmentInfoReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrimaryListRequestPro_descriptor_, &GetPrimaryListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentLocationPro_descriptor_, &SegmentLocationPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryTriggerReplyPro_descriptor_, &RecoveryTriggerReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadSegmentAckPro_descriptor_, &UploadSegmentAckPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSegmentInfoRequestPro_descriptor_, &GetSegmentInfoRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutSegmentInitReplyPro_descriptor_, &PutSegmentInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentTransferEndReplyPro_descriptor_, &SegmentTransferEndReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutBlockInitRequestPro_descriptor_, &PutBlockInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockDataPro_descriptor_, &BlockDataPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockTransferEndRequestPro_descriptor_, &BlockTransferEndRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutBlockInitReplyPro_descriptor_, &PutBlockInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockTransferEndReplyPro_descriptor_, &BlockTransferEndReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlockInitRequestPro_descriptor_, &GetBlockInitRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlockInitReplyPro_descriptor_, &GetBlockInitReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStartupPro_descriptor_, &OsdStartupPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdShutdownPro_descriptor_, &OsdShutdownPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStatUpdateReplyPro_descriptor_, &OsdStatUpdateReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSecondaryListRequestPro_descriptor_, &GetSecondaryListRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OsdStatUpdateRequestPro_descriptor_, &OsdStatUpdateRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSecondaryListReplyPro_descriptor_, &GetSecondaryListReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewOsdRegisterPro_descriptor_, &NewOsdRegisterPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineOsdPro_descriptor_, &OnlineOsdPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineOsdListPro_descriptor_, &OnlineOsdListPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOsdStatusRequestPro_descriptor_, &GetOsdStatusRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOsdStatusReplyPro_descriptor_, &GetOsdStatusReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepairSegmentInfoPro_descriptor_, &RepairSegmentInfoPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPrimaryListReplyPro_descriptor_, &GetPrimaryListReplyPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoveryTriggerRequestPro_descriptor_, &RecoveryTriggerRequestPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOsdListReplyPro_descriptor_, &GetOsdListReplyPro::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete HandshakeRequestPro::default_instance_;
  delete HandshakeRequestPro_reflection_;
  delete HandshakeReplyPro::default_instance_;
  delete HandshakeReplyPro_reflection_;
  delete OffsetLengthPro::default_instance_;
  delete OffsetLengthPro_reflection_;
  delete DataMsgPro::default_instance_;
  delete DataMsgPro_reflection_;
  delete ListDirectoryRequestPro::default_instance_;
  delete ListDirectoryRequestPro_reflection_;
  delete UploadFileRequestPro::default_instance_;
  delete UploadFileRequestPro_reflection_;
  delete DeleteFileRequestPro::default_instance_;
  delete DeleteFileRequestPro_reflection_;
  delete RenameFileRequestPro::default_instance_;
  delete RenameFileRequestPro_reflection_;
  delete DownloadFileRequestPro::default_instance_;
  delete DownloadFileRequestPro_reflection_;
  delete SaveSegmentListRequestPro::default_instance_;
  delete SaveSegmentListRequestPro_reflection_;
  delete SetFileSizeRequestPro::default_instance_;
  delete SetFileSizeRequestPro_reflection_;
  delete GetSegmentIdListRequestPro::default_instance_;
  delete GetSegmentIdListRequestPro_reflection_;
  delete PutSegmentInitRequestPro::default_instance_;
  delete PutSegmentInitRequestPro_reflection_;
  delete SegmentDataPro::default_instance_;
  delete SegmentDataPro_reflection_;
  delete GetSegmentRequestPro::default_instance_;
  delete GetSegmentRequestPro_reflection_;
  delete SegmentTransferEndRequestPro::default_instance_;
  delete SegmentTransferEndRequestPro_reflection_;
  delete PutSmallSegmentRequestPro::default_instance_;
  delete PutSmallSegmentRequestPro_reflection_;
  delete GetOsdListRequestPro::default_instance_;
  delete GetOsdListRequestPro_reflection_;
  delete ListDirectoryReplyPro::default_instance_;
  delete ListDirectoryReplyPro_reflection_;
  delete FileInfoPro::default_instance_;
  delete FileInfoPro_reflection_;
  delete BlockLocationPro::default_instance_;
  delete BlockLocationPro_reflection_;
  delete UploadFileReplyPro::default_instance_;
  delete UploadFileReplyPro_reflection_;
  delete DeleteFileReplyPro::default_instance_;
  delete DeleteFileReplyPro_reflection_;
  delete RenameFileReplyPro::default_instance_;
  delete RenameFileReplyPro_reflection_;
  delete SaveSegmentListReplyPro::default_instance_;
  delete SaveSegmentListReplyPro_reflection_;
  delete DownloadFileReplyPro::default_instance_;
  delete DownloadFileReplyPro_reflection_;
  delete GetSegmentIdListReplyPro::default_instance_;
  delete GetSegmentIdListReplyPro_reflection_;
  delete SwitchPrimaryOsdReplyPro::default_instance_;
  delete SwitchPrimaryOsdReplyPro_reflection_;
  delete UploadSegmentAckReplyPro::default_instance_;
  delete UploadSegmentAckReplyPro_reflection_;
  delete GetSegmentInfoReplyPro::default_instance_;
  delete GetSegmentInfoReplyPro_reflection_;
  delete GetPrimaryListRequestPro::default_instance_;
  delete GetPrimaryListRequestPro_reflection_;
  delete SegmentLocationPro::default_instance_;
  delete SegmentLocationPro_reflection_;
  delete RecoveryTriggerReplyPro::default_instance_;
  delete RecoveryTriggerReplyPro_reflection_;
  delete UploadSegmentAckPro::default_instance_;
  delete UploadSegmentAckPro_reflection_;
  delete GetSegmentInfoRequestPro::default_instance_;
  delete GetSegmentInfoRequestPro_reflection_;
  delete PutSegmentInitReplyPro::default_instance_;
  delete PutSegmentInitReplyPro_reflection_;
  delete SegmentTransferEndReplyPro::default_instance_;
  delete SegmentTransferEndReplyPro_reflection_;
  delete PutBlockInitRequestPro::default_instance_;
  delete PutBlockInitRequestPro_reflection_;
  delete BlockDataPro::default_instance_;
  delete BlockDataPro_reflection_;
  delete BlockTransferEndRequestPro::default_instance_;
  delete BlockTransferEndRequestPro_reflection_;
  delete PutBlockInitReplyPro::default_instance_;
  delete PutBlockInitReplyPro_reflection_;
  delete BlockTransferEndReplyPro::default_instance_;
  delete BlockTransferEndReplyPro_reflection_;
  delete GetBlockInitRequestPro::default_instance_;
  delete GetBlockInitRequestPro_reflection_;
  delete GetBlockInitReplyPro::default_instance_;
  delete GetBlockInitReplyPro_reflection_;
  delete OsdStartupPro::default_instance_;
  delete OsdStartupPro_reflection_;
  delete OsdShutdownPro::default_instance_;
  delete OsdShutdownPro_reflection_;
  delete OsdStatUpdateReplyPro::default_instance_;
  delete OsdStatUpdateReplyPro_reflection_;
  delete GetSecondaryListRequestPro::default_instance_;
  delete GetSecondaryListRequestPro_reflection_;
  delete OsdStatUpdateRequestPro::default_instance_;
  delete OsdStatUpdateRequestPro_reflection_;
  delete GetSecondaryListReplyPro::default_instance_;
  delete GetSecondaryListReplyPro_reflection_;
  delete NewOsdRegisterPro::default_instance_;
  delete NewOsdRegisterPro_reflection_;
  delete OnlineOsdPro::default_instance_;
  delete OnlineOsdPro_reflection_;
  delete OnlineOsdListPro::default_instance_;
  delete OnlineOsdListPro_reflection_;
  delete GetOsdStatusRequestPro::default_instance_;
  delete GetOsdStatusRequestPro_reflection_;
  delete GetOsdStatusReplyPro::default_instance_;
  delete GetOsdStatusReplyPro_reflection_;
  delete RepairSegmentInfoPro::default_instance_;
  delete RepairSegmentInfoPro_reflection_;
  delete GetPrimaryListReplyPro::default_instance_;
  delete GetPrimaryListReplyPro_reflection_;
  delete RecoveryTriggerRequestPro::default_instance_;
  delete RecoveryTriggerRequestPro_reflection_;
  delete GetOsdListReplyPro::default_instance_;
  delete GetOsdListReplyPro_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\005ncvfs\"\247\001\n\023HandshakeRequ"
    "estPro\022\023\n\013componentId\030\001 \001(\007\022\?\n\rcomponent"
    "Type\030\002 \001(\0162(.ncvfs.HandshakeRequestPro.C"
    "omponentType\":\n\rComponentType\022\n\n\006CLIENT\020"
    "\001\022\007\n\003OSD\020\002\022\007\n\003MDS\020\003\022\013\n\007MONITOR\020\004\"i\n\021Hand"
    "shakeReplyPro\022\023\n\013componentId\030\001 \001(\007\022\?\n\rco"
    "mponentType\030\002 \001(\0162(.ncvfs.HandshakeReque"
    "stPro.ComponentType\"1\n\017OffsetLengthPro\022\016"
    "\n\006offset\030\001 \001(\007\022\016\n\006length\030\002 \001(\007\"q\n\nDataMs"
    "gPro\"c\n\013DataMsgType\022\024\n\020DEFAULT_DATA_MSG\020"
    "\017\022\n\n\006UPLOAD\020\001\022\014\n\010DOWNLOAD\020\002\022\014\n\010RECOVERY\020"
    "\003\022\n\n\006UPDATE\020\004\022\n\n\006PARITY\020\005\"\?\n\027ListDirecto"
    "ryRequestPro\022\r\n\005osdId\030\001 \001(\007\022\025\n\rdirectory"
    "Path\030\002 \001(\t\"[\n\024UploadFileRequestPro\022\020\n\010cl"
    "ientId\030\001 \001(\007\022\020\n\010fileSize\030\002 \001(\006\022\021\n\tnumOfO"
    "bjs\030\003 \001(\007\022\014\n\004path\030\004 \001(\t\"F\n\024DeleteFileReq"
    "uestPro\022\020\n\010clientId\030\001 \001(\007\022\016\n\006fileId\030\002 \001("
    "\007\022\014\n\004path\030\003 \001(\t\"W\n\024RenameFileRequestPro\022"
    "\020\n\010clientId\030\001 \001(\007\022\016\n\006fileId\030\002 \001(\007\022\014\n\004pat"
    "h\030\003 \001(\t\022\017\n\007newPath\030\004 \001(\t\"L\n\026DownloadFile"
    "RequestPro\022\020\n\010clientId\030\001 \001(\007\022\016\n\006fileId\030\002"
    " \001(\007\022\020\n\010filePath\030\003 \001(\t\"R\n\031SaveSegmentLis"
    "tRequestPro\022\020\n\010clientId\030\001 \001(\007\022\016\n\006fileId\030"
    "\002 \001(\007\022\023\n\013segmentList\030\003 \003(\006\"K\n\025SetFileSiz"
    "eRequestPro\022\020\n\010clientId\030\001 \001(\007\022\016\n\006fileId\030"
    "\002 \001(\007\022\020\n\010fileSize\030\003 \001(\006\"A\n\032GetSegmentIdL"
    "istRequestPro\022\020\n\010clientId\030\001 \001(\007\022\021\n\tnumOf"
    "Objs\030\002 \001(\007\"\267\003\n\030PutSegmentInitRequestPro\022"
    "\021\n\tsegmentId\030\001 \001(\006\022\023\n\013segmentSize\030\002 \001(\007\022"
    "\022\n\nchunkCount\030\003 \001(\007\022B\n\014codingScheme\030\004 \001("
    "\0162,.ncvfs.PutSegmentInitRequestPro.Codin"
    "gScheme\022\025\n\rcodingSetting\030\005 \001(\t\0222\n\013dataMs"
    "gType\030\007 \001(\0162\035.ncvfs.DataMsgPro.DataMsgTy"
    "pe\022\021\n\tupdateKey\030\010 \001(\t\022\022\n\nbufferSize\030\t \001("
    "\007\"\250\001\n\014CodingScheme\022\020\n\014RAID0_CODING\020\001\022\020\n\014"
    "RAID1_CODING\020\002\022\020\n\014RAID5_CODING\020\003\022\r\n\tRS_C"
    "ODING\020\004\022\017\n\013EMBR_CODING\020\005\022\n\n\006CAUCHY\020\006\022\022\n\016"
    "EVENODD_CODING\020\007\022\016\n\nRDP_CODING\020\010\022\022\n\016DEFA"
    "ULT_CODING\020\017\"\212\001\n\016SegmentDataPro\022\021\n\tsegme"
    "ntId\030\001 \001(\006\022\016\n\006offset\030\002 \001(\006\022\016\n\006length\030\003 \001"
    "(\007\0222\n\013dataMsgType\030\004 \001(\0162\035.ncvfs.DataMsgP"
    "ro.DataMsgType\022\021\n\tupdateKey\030\005 \001(\t\")\n\024Get"
    "SegmentRequestPro\022\021\n\tsegmentId\030\001 \001(\006\"\246\001\n"
    "\034SegmentTransferEndRequestPro\022\021\n\tsegment"
    "Id\030\001 \001(\006\0222\n\013dataMsgType\030\004 \001(\0162\035.ncvfs.Da"
    "taMsgPro.DataMsgType\022\021\n\tupdateKey\030\005 \001(\t\022"
    ",\n\014offsetLength\030\006 \003(\0132\026.ncvfs.OffsetLeng"
    "thPro\"\247\002\n\031PutSmallSegmentRequestPro\022\021\n\ts"
    "egmentId\030\001 \001(\006\022\023\n\013segmentSize\030\002 \001(\007\022B\n\014c"
    "odingScheme\030\003 \001(\0162,.ncvfs.PutSegmentInit"
    "RequestPro.CodingScheme\022\025\n\rcodingSetting"
    "\030\004 \001(\t\0222\n\013dataMsgType\030\005 \001(\0162\035.ncvfs.Data"
    "MsgPro.DataMsgType\022\021\n\tupdateKey\030\006 \001(\t\022\022\n"
    "\nbufferSize\030\007 \001(\007\022,\n\014offsetLength\030\010 \003(\0132"
    "\026.ncvfs.OffsetLengthPro\"\026\n\024GetOsdListReq"
    "uestPro\"@\n\025ListDirectoryReplyPro\022\'\n\013file"
    "InfoPro\030\001 \003(\0132\022.ncvfs.FileInfoPro\"A\n\013Fil"
    "eInfoPro\022\016\n\006fileId\030\001 \001(\007\022\020\n\010fileSize\030\002 \001"
    "(\006\022\020\n\010fileName\030\003 \001(\t\"2\n\020BlockLocationPro"
    "\022\r\n\005osdId\030\001 \001(\007\022\017\n\007blockId\030\002 \001(\007\"N\n\022Uplo"
    "adFileReplyPro\022\016\n\006fileId\030\001 \001(\007\022\023\n\013segmen"
    "tList\030\002 \003(\006\022\023\n\013primaryList\030\003 \003(\007\"2\n\022Dele"
    "teFileReplyPro\022\016\n\006fileId\030\001 \001(\007\022\014\n\004path\030\002"
    " \001(\t\"$\n\022RenameFileReplyPro\022\016\n\006fileId\030\001 \001"
    "(\007\")\n\027SaveSegmentListReplyPro\022\016\n\006fileId\030"
    "\001 \001(\007\"\335\001\n\024DownloadFileReplyPro\022\016\n\006fileId"
    "\030\002 \001(\007\022\020\n\010filePath\030\003 \001(\t\022\020\n\010fileSize\030\004 \001"
    "(\006\0226\n\010fileType\030\005 \001(\0162$.ncvfs.DownloadFil"
    "eReplyPro.FileType\022\023\n\013segmentList\030\007 \003(\006\022"
    "\023\n\013primaryList\030\010 \003(\007\"/\n\010FileType\022\013\n\007NEWF"
    "ILE\020\001\022\n\n\006NORMAL\020\002\022\n\n\006FOLDER\020\003\"F\n\030GetSegm"
    "entIdListReplyPro\022\025\n\rsegmentIdList\030\001 \003(\006"
    "\022\023\n\013primaryList\030\002 \003(\007\"3\n\030SwitchPrimaryOs"
    "dReplyPro\022\027\n\017newPrimaryOsdId\030\001 \001(\007\"-\n\030Up"
    "loadSegmentAckReplyPro\022\021\n\tsegmentId\030\001 \001("
    "\006\"\255\001\n\026GetSegmentInfoReplyPro\022\021\n\tsegmentI"
    "d\030\001 \001(\006\022\020\n\010nodeList\030\002 \003(\007\022B\n\014codingSchem"
    "e\030\003 \001(\0162,.ncvfs.PutSegmentInitRequestPro"
    ".CodingScheme\022\025\n\rcodingSetting\030\004 \001(\t\022\023\n\013"
    "segmentSize\030\005 \001(\007\"B\n\030GetPrimaryListReque"
    "stPro\022\021\n\tnumOfObjs\030\001 \001(\007\022\023\n\013primaryList\030"
    "\002 \003(\007\"K\n\022SegmentLocationPro\022\021\n\tsegmentId"
    "\030\001 \001(\006\022\021\n\tprimaryId\030\002 \001(\007\022\017\n\007osdList\030\003 \003"
    "(\007\"N\n\027RecoveryTriggerReplyPro\0223\n\020segment"
    "Locations\030\001 \003(\0132\031.ncvfs.SegmentLocationP"
    "ro\"\252\001\n\023UploadSegmentAckPro\022\021\n\tsegmentId\030"
    "\001 \001(\006\022B\n\014codingScheme\030\002 \001(\0162,.ncvfs.PutS"
    "egmentInitRequestPro.CodingScheme\022\025\n\rcod"
    "ingSetting\030\003 \001(\t\022\020\n\010nodeList\030\004 \003(\007\022\023\n\013se"
    "gmentSize\030\006 \001(\007\"c\n\030GetSegmentInfoRequest"
    "Pro\022\021\n\tsegmentId\030\001 \001(\006\022\r\n\005osdId\030\002 \001(\007\022\021\n"
    "\tneedReply\030\003 \001(\010\022\022\n\nisRecovery\030\004 \001(\010\"_\n\026"
    "PutSegmentInitReplyPro\022\021\n\tsegmentId\030\001 \001("
    "\006\0222\n\013dataMsgType\030\002 \001(\0162\035.ncvfs.DataMsgPr"
    "o.DataMsgType\"G\n\032SegmentTransferEndReply"
    "Pro\022\021\n\tsegmentId\030\001 \001(\006\022\026\n\016isSmallSegment"
    "\030\002 \001(\010\"\252\001\n\026PutBlockInitRequestPro\022\021\n\tseg"
    "mentId\030\001 \001(\006\022\017\n\007blockId\030\002 \001(\007\022\021\n\tblockSi"
    "ze\030\003 \001(\007\022\022\n\nchunkCount\030\004 \001(\007\0222\n\013dataMsgT"
    "ype\030\005 \001(\0162\035.ncvfs.DataMsgPro.DataMsgType"
    "\022\021\n\tupdateKey\030\006 \001(\t\"\231\001\n\014BlockDataPro\022\021\n\t"
    "segmentId\030\001 \001(\006\022\017\n\007blockId\030\002 \001(\007\022\016\n\006offs"
    "et\030\003 \001(\006\022\016\n\006length\030\004 \001(\007\0222\n\013dataMsgType\030"
    "\005 \001(\0162\035.ncvfs.DataMsgPro.DataMsgType\022\021\n\t"
    "updateKey\030\006 \001(\t\"\325\002\n\032BlockTransferEndRequ"
    "estPro\022\021\n\tsegmentId\030\001 \001(\006\022\017\n\007blockId\030\002 \001"
    "(\007\0222\n\013dataMsgType\030\003 \001(\0162\035.ncvfs.DataMsgP"
    "ro.DataMsgType\022\021\n\tupdateKey\030\004 \001(\t\022,\n\014off"
    "setLength\030\005 \003(\0132\026.ncvfs.OffsetLengthPro\022"
    ".\n\rblockLocation\030\006 \003(\0132\027.ncvfs.BlockLoca"
    "tionPro\022B\n\014codingScheme\030\007 \001(\0162,.ncvfs.Pu"
    "tSegmentInitRequestPro.CodingScheme\022\025\n\rc"
    "odingSetting\030\010 \001(\t\022\023\n\013segmentSize\030\t \001(\006\""
    ":\n\024PutBlockInitReplyPro\022\021\n\tsegmentId\030\001 \001"
    "(\006\022\017\n\007blockId\030\002 \001(\007\">\n\030BlockTransferEndR"
    "eplyPro\022\021\n\tsegmentId\030\001 \001(\006\022\017\n\007blockId\030\002 "
    "\001(\007\"\260\001\n\026GetBlockInitRequestPro\022\021\n\tsegmen"
    "tId\030\001 \001(\006\022\017\n\007blockId\030\002 \001(\007\022,\n\014offsetLeng"
    "th\030\003 \003(\0132\026.ncvfs.OffsetLengthPro\0222\n\013data"
    "MsgType\030\004 \001(\0162\035.ncvfs.DataMsgPro.DataMsg"
    "Type\022\020\n\010isParity\030\005 \001(\010\"a\n\024GetBlockInitRe"
    "plyPro\022\021\n\tsegmentId\030\001 \001(\006\022\017\n\007blockId\030\002 \001"
    "(\007\022\021\n\tblockSize\030\003 \001(\007\022\022\n\nchunkCount\030\004 \001("
    "\007\"g\n\rOsdStartupPro\022\r\n\005osdId\030\001 \001(\007\022\023\n\013osd"
    "Capacity\030\002 \001(\007\022\022\n\nosdLoading\030\003 \001(\007\022\r\n\005os"
    "dIp\030\004 \001(\007\022\017\n\007osdPort\030\005 \001(\007\"\037\n\016OsdShutdow"
    "nPro\022\r\n\005osdId\030\001 \001(\007\"O\n\025OsdStatUpdateRepl"
    "yPro\022\r\n\005osdId\030\001 \001(\007\022\023\n\013osdCapacity\030\002 \001(\007"
    "\022\022\n\nosdLoading\030\003 \001(\007\"U\n\032GetSecondaryList"
    "RequestPro\022\021\n\tnumOfSegs\030\001 \001(\007\022\021\n\tprimary"
    "Id\030\002 \001(\007\022\021\n\tblockSize\030\003 \001(\006\"\031\n\027OsdStatUp"
    "dateRequestPro\"J\n\030GetSecondaryListReplyP"
    "ro\022.\n\rsecondaryList\030\001 \003(\0132\027.ncvfs.BlockL"
    "ocationPro\"B\n\021NewOsdRegisterPro\022\r\n\005osdId"
    "\030\001 \001(\007\022\r\n\005osdIp\030\002 \001(\007\022\017\n\007osdPort\030\003 \001(\007\"="
    "\n\014OnlineOsdPro\022\r\n\005osdId\030\001 \001(\007\022\r\n\005osdIp\030\002"
    " \001(\007\022\017\n\007osdPort\030\003 \001(\007\">\n\020OnlineOsdListPr"
    "o\022*\n\ronlineOsdList\030\001 \003(\0132\023.ncvfs.OnlineO"
    "sdPro\"(\n\026GetOsdStatusRequestPro\022\016\n\006osdId"
    "s\030\001 \003(\007\")\n\024GetOsdStatusReplyPro\022\021\n\tosdSt"
    "atus\030\001 \003(\010\"R\n\024RepairSegmentInfoPro\022\021\n\tse"
    "gmentId\030\001 \001(\006\022\024\n\014deadBlockIds\030\002 \003(\007\022\021\n\tn"
    "ewOsdIds\030\003 \003(\007\"-\n\026GetPrimaryListReplyPro"
    "\022\023\n\013primaryList\030\001 \003(\007\"V\n\031RecoveryTrigger"
    "RequestPro\022\017\n\007osdList\030\001 \003(\007\022\022\n\ndstOsdLis"
    "t\030\002 \003(\007\022\024\n\014dstspecified\030\003 \001(\010\"@\n\022GetOsdL"
    "istReplyPro\022*\n\ronlineOsdList\030\001 \003(\0132\023.ncv"
    "fs.OnlineOsdProB\002H\001", 5899);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  HandshakeRequestPro::default_instance_ = new HandshakeRequestPro();
  HandshakeReplyPro::default_instance_ = new HandshakeReplyPro();
  OffsetLengthPro::default_instance_ = new OffsetLengthPro();
  DataMsgPro::default_instance_ = new DataMsgPro();
  ListDirectoryRequestPro::default_instance_ = new ListDirectoryRequestPro();
  UploadFileRequestPro::default_instance_ = new UploadFileRequestPro();
  DeleteFileRequestPro::default_instance_ = new DeleteFileRequestPro();
  RenameFileRequestPro::default_instance_ = new RenameFileRequestPro();
  DownloadFileRequestPro::default_instance_ = new DownloadFileRequestPro();
  SaveSegmentListRequestPro::default_instance_ = new SaveSegmentListRequestPro();
  SetFileSizeRequestPro::default_instance_ = new SetFileSizeRequestPro();
  GetSegmentIdListRequestPro::default_instance_ = new GetSegmentIdListRequestPro();
  PutSegmentInitRequestPro::default_instance_ = new PutSegmentInitRequestPro();
  SegmentDataPro::default_instance_ = new SegmentDataPro();
  GetSegmentRequestPro::default_instance_ = new GetSegmentRequestPro();
  SegmentTransferEndRequestPro::default_instance_ = new SegmentTransferEndRequestPro();
  PutSmallSegmentRequestPro::default_instance_ = new PutSmallSegmentRequestPro();
  GetOsdListRequestPro::default_instance_ = new GetOsdListRequestPro();
  ListDirectoryReplyPro::default_instance_ = new ListDirectoryReplyPro();
  FileInfoPro::default_instance_ = new FileInfoPro();
  BlockLocationPro::default_instance_ = new BlockLocationPro();
  UploadFileReplyPro::default_instance_ = new UploadFileReplyPro();
  DeleteFileReplyPro::default_instance_ = new DeleteFileReplyPro();
  RenameFileReplyPro::default_instance_ = new RenameFileReplyPro();
  SaveSegmentListReplyPro::default_instance_ = new SaveSegmentListReplyPro();
  DownloadFileReplyPro::default_instance_ = new DownloadFileReplyPro();
  GetSegmentIdListReplyPro::default_instance_ = new GetSegmentIdListReplyPro();
  SwitchPrimaryOsdReplyPro::default_instance_ = new SwitchPrimaryOsdReplyPro();
  UploadSegmentAckReplyPro::default_instance_ = new UploadSegmentAckReplyPro();
  GetSegmentInfoReplyPro::default_instance_ = new GetSegmentInfoReplyPro();
  GetPrimaryListRequestPro::default_instance_ = new GetPrimaryListRequestPro();
  SegmentLocationPro::default_instance_ = new SegmentLocationPro();
  RecoveryTriggerReplyPro::default_instance_ = new RecoveryTriggerReplyPro();
  UploadSegmentAckPro::default_instance_ = new UploadSegmentAckPro();
  GetSegmentInfoRequestPro::default_instance_ = new GetSegmentInfoRequestPro();
  PutSegmentInitReplyPro::default_instance_ = new PutSegmentInitReplyPro();
  SegmentTransferEndReplyPro::default_instance_ = new SegmentTransferEndReplyPro();
  PutBlockInitRequestPro::default_instance_ = new PutBlockInitRequestPro();
  BlockDataPro::default_instance_ = new BlockDataPro();
  BlockTransferEndRequestPro::default_instance_ = new BlockTransferEndRequestPro();
  PutBlockInitReplyPro::default_instance_ = new PutBlockInitReplyPro();
  BlockTransferEndReplyPro::default_instance_ = new BlockTransferEndReplyPro();
  GetBlockInitRequestPro::default_instance_ = new GetBlockInitRequestPro();
  GetBlockInitReplyPro::default_instance_ = new GetBlockInitReplyPro();
  OsdStartupPro::default_instance_ = new OsdStartupPro();
  OsdShutdownPro::default_instance_ = new OsdShutdownPro();
  OsdStatUpdateReplyPro::default_instance_ = new OsdStatUpdateReplyPro();
  GetSecondaryListRequestPro::default_instance_ = new GetSecondaryListRequestPro();
  OsdStatUpdateRequestPro::default_instance_ = new OsdStatUpdateRequestPro();
  GetSecondaryListReplyPro::default_instance_ = new GetSecondaryListReplyPro();
  NewOsdRegisterPro::default_instance_ = new NewOsdRegisterPro();
  OnlineOsdPro::default_instance_ = new OnlineOsdPro();
  OnlineOsdListPro::default_instance_ = new OnlineOsdListPro();
  GetOsdStatusRequestPro::default_instance_ = new GetOsdStatusRequestPro();
  GetOsdStatusReplyPro::default_instance_ = new GetOsdStatusReplyPro();
  RepairSegmentInfoPro::default_instance_ = new RepairSegmentInfoPro();
  GetPrimaryListReplyPro::default_instance_ = new GetPrimaryListReplyPro();
  RecoveryTriggerRequestPro::default_instance_ = new RecoveryTriggerRequestPro();
  GetOsdListReplyPro::default_instance_ = new GetOsdListReplyPro();
  HandshakeRequestPro::default_instance_->InitAsDefaultInstance();
  HandshakeReplyPro::default_instance_->InitAsDefaultInstance();
  OffsetLengthPro::default_instance_->InitAsDefaultInstance();
  DataMsgPro::default_instance_->InitAsDefaultInstance();
  ListDirectoryRequestPro::default_instance_->InitAsDefaultInstance();
  UploadFileRequestPro::default_instance_->InitAsDefaultInstance();
  DeleteFileRequestPro::default_instance_->InitAsDefaultInstance();
  RenameFileRequestPro::default_instance_->InitAsDefaultInstance();
  DownloadFileRequestPro::default_instance_->InitAsDefaultInstance();
  SaveSegmentListRequestPro::default_instance_->InitAsDefaultInstance();
  SetFileSizeRequestPro::default_instance_->InitAsDefaultInstance();
  GetSegmentIdListRequestPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitRequestPro::default_instance_->InitAsDefaultInstance();
  SegmentDataPro::default_instance_->InitAsDefaultInstance();
  GetSegmentRequestPro::default_instance_->InitAsDefaultInstance();
  SegmentTransferEndRequestPro::default_instance_->InitAsDefaultInstance();
  PutSmallSegmentRequestPro::default_instance_->InitAsDefaultInstance();
  GetOsdListRequestPro::default_instance_->InitAsDefaultInstance();
  ListDirectoryReplyPro::default_instance_->InitAsDefaultInstance();
  FileInfoPro::default_instance_->InitAsDefaultInstance();
  BlockLocationPro::default_instance_->InitAsDefaultInstance();
  UploadFileReplyPro::default_instance_->InitAsDefaultInstance();
  DeleteFileReplyPro::default_instance_->InitAsDefaultInstance();
  RenameFileReplyPro::default_instance_->InitAsDefaultInstance();
  SaveSegmentListReplyPro::default_instance_->InitAsDefaultInstance();
  DownloadFileReplyPro::default_instance_->InitAsDefaultInstance();
  GetSegmentIdListReplyPro::default_instance_->InitAsDefaultInstance();
  SwitchPrimaryOsdReplyPro::default_instance_->InitAsDefaultInstance();
  UploadSegmentAckReplyPro::default_instance_->InitAsDefaultInstance();
  GetSegmentInfoReplyPro::default_instance_->InitAsDefaultInstance();
  GetPrimaryListRequestPro::default_instance_->InitAsDefaultInstance();
  SegmentLocationPro::default_instance_->InitAsDefaultInstance();
  RecoveryTriggerReplyPro::default_instance_->InitAsDefaultInstance();
  UploadSegmentAckPro::default_instance_->InitAsDefaultInstance();
  GetSegmentInfoRequestPro::default_instance_->InitAsDefaultInstance();
  PutSegmentInitReplyPro::default_instance_->InitAsDefaultInstance();
  SegmentTransferEndReplyPro::default_instance_->InitAsDefaultInstance();
  PutBlockInitRequestPro::default_instance_->InitAsDefaultInstance();
  BlockDataPro::default_instance_->InitAsDefaultInstance();
  BlockTransferEndRequestPro::default_instance_->InitAsDefaultInstance();
  PutBlockInitReplyPro::default_instance_->InitAsDefaultInstance();
  BlockTransferEndReplyPro::default_instance_->InitAsDefaultInstance();
  GetBlockInitRequestPro::default_instance_->InitAsDefaultInstance();
  GetBlockInitReplyPro::default_instance_->InitAsDefaultInstance();
  OsdStartupPro::default_instance_->InitAsDefaultInstance();
  OsdShutdownPro::default_instance_->InitAsDefaultInstance();
  OsdStatUpdateReplyPro::default_instance_->InitAsDefaultInstance();
  GetSecondaryListRequestPro::default_instance_->InitAsDefaultInstance();
  OsdStatUpdateRequestPro::default_instance_->InitAsDefaultInstance();
  GetSecondaryListReplyPro::default_instance_->InitAsDefaultInstance();
  NewOsdRegisterPro::default_instance_->InitAsDefaultInstance();
  OnlineOsdPro::default_instance_->InitAsDefaultInstance();
  OnlineOsdListPro::default_instance_->InitAsDefaultInstance();
  GetOsdStatusRequestPro::default_instance_->InitAsDefaultInstance();
  GetOsdStatusReplyPro::default_instance_->InitAsDefaultInstance();
  RepairSegmentInfoPro::default_instance_->InitAsDefaultInstance();
  GetPrimaryListReplyPro::default_instance_->InitAsDefaultInstance();
  RecoveryTriggerRequestPro::default_instance_->InitAsDefaultInstance();
  GetOsdListReplyPro::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* HandshakeRequestPro_ComponentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequestPro_ComponentType_descriptor_;
}
bool HandshakeRequestPro_ComponentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HandshakeRequestPro_ComponentType HandshakeRequestPro::CLIENT;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::OSD;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::MDS;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::MONITOR;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::ComponentType_MIN;
const HandshakeRequestPro_ComponentType HandshakeRequestPro::ComponentType_MAX;
const int HandshakeRequestPro::ComponentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HandshakeRequestPro::kComponentIdFieldNumber;
const int HandshakeRequestPro::kComponentTypeFieldNumber;
#endif  // !_MSC_VER

HandshakeRequestPro::HandshakeRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeRequestPro::InitAsDefaultInstance() {
}

HandshakeRequestPro::HandshakeRequestPro(const HandshakeRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeRequestPro::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = 0u;
  componenttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeRequestPro::~HandshakeRequestPro() {
  SharedDtor();
}

void HandshakeRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeRequestPro_descriptor_;
}

const HandshakeRequestPro& HandshakeRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HandshakeRequestPro* HandshakeRequestPro::default_instance_ = NULL;

HandshakeRequestPro* HandshakeRequestPro::New() const {
  return new HandshakeRequestPro;
}

void HandshakeRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    componentid_ = 0u;
    componenttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 componentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &componentid_)));
          set_has_componentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_componentType;
        break;
      }
      
      // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_componentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::HandshakeRequestPro_ComponentType_IsValid(value)) {
            set_componenttype(static_cast< ::ncvfs::HandshakeRequestPro_ComponentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->componentid(), output);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->componenttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->componentid(), target);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->componenttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 componentId = 1;
    if (has_componentid()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
    if (has_componenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->componenttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeRequestPro::MergeFrom(const HandshakeRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_componenttype()) {
      set_componenttype(from.componenttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeRequestPro::CopyFrom(const HandshakeRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequestPro::IsInitialized() const {
  
  return true;
}

void HandshakeRequestPro::Swap(HandshakeRequestPro* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(componenttype_, other->componenttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeRequestPro_descriptor_;
  metadata.reflection = HandshakeRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandshakeReplyPro::kComponentIdFieldNumber;
const int HandshakeReplyPro::kComponentTypeFieldNumber;
#endif  // !_MSC_VER

HandshakeReplyPro::HandshakeReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandshakeReplyPro::InitAsDefaultInstance() {
}

HandshakeReplyPro::HandshakeReplyPro(const HandshakeReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandshakeReplyPro::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = 0u;
  componenttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandshakeReplyPro::~HandshakeReplyPro() {
  SharedDtor();
}

void HandshakeReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandshakeReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandshakeReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandshakeReplyPro_descriptor_;
}

const HandshakeReplyPro& HandshakeReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HandshakeReplyPro* HandshakeReplyPro::default_instance_ = NULL;

HandshakeReplyPro* HandshakeReplyPro::New() const {
  return new HandshakeReplyPro;
}

void HandshakeReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    componentid_ = 0u;
    componenttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandshakeReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 componentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &componentid_)));
          set_has_componentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_componentType;
        break;
      }
      
      // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_componentType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::HandshakeRequestPro_ComponentType_IsValid(value)) {
            set_componenttype(static_cast< ::ncvfs::HandshakeRequestPro_ComponentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandshakeReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->componentid(), output);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->componenttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandshakeReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 componentId = 1;
  if (has_componentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->componentid(), target);
  }
  
  // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
  if (has_componenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->componenttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandshakeReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 componentId = 1;
    if (has_componentid()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.HandshakeRequestPro.ComponentType componentType = 2;
    if (has_componenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->componenttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandshakeReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandshakeReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandshakeReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandshakeReplyPro::MergeFrom(const HandshakeReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_componenttype()) {
      set_componenttype(from.componenttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandshakeReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeReplyPro::CopyFrom(const HandshakeReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeReplyPro::IsInitialized() const {
  
  return true;
}

void HandshakeReplyPro::Swap(HandshakeReplyPro* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(componenttype_, other->componenttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandshakeReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandshakeReplyPro_descriptor_;
  metadata.reflection = HandshakeReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OffsetLengthPro::kOffsetFieldNumber;
const int OffsetLengthPro::kLengthFieldNumber;
#endif  // !_MSC_VER

OffsetLengthPro::OffsetLengthPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OffsetLengthPro::InitAsDefaultInstance() {
}

OffsetLengthPro::OffsetLengthPro(const OffsetLengthPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OffsetLengthPro::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OffsetLengthPro::~OffsetLengthPro() {
  SharedDtor();
}

void OffsetLengthPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffsetLengthPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffsetLengthPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetLengthPro_descriptor_;
}

const OffsetLengthPro& OffsetLengthPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OffsetLengthPro* OffsetLengthPro::default_instance_ = NULL;

OffsetLengthPro* OffsetLengthPro::New() const {
  return new OffsetLengthPro;
}

void OffsetLengthPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0u;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OffsetLengthPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OffsetLengthPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->offset(), output);
  }
  
  // optional fixed32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OffsetLengthPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->offset(), target);
  }
  
  // optional fixed32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OffsetLengthPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 offset = 1;
    if (has_offset()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 length = 2;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffsetLengthPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OffsetLengthPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OffsetLengthPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OffsetLengthPro::MergeFrom(const OffsetLengthPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OffsetLengthPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffsetLengthPro::CopyFrom(const OffsetLengthPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffsetLengthPro::IsInitialized() const {
  
  return true;
}

void OffsetLengthPro::Swap(OffsetLengthPro* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OffsetLengthPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffsetLengthPro_descriptor_;
  metadata.reflection = OffsetLengthPro_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataMsgPro_DataMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMsgPro_DataMsgType_descriptor_;
}
bool DataMsgPro_DataMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataMsgPro_DataMsgType DataMsgPro::DEFAULT_DATA_MSG;
const DataMsgPro_DataMsgType DataMsgPro::UPLOAD;
const DataMsgPro_DataMsgType DataMsgPro::DOWNLOAD;
const DataMsgPro_DataMsgType DataMsgPro::RECOVERY;
const DataMsgPro_DataMsgType DataMsgPro::UPDATE;
const DataMsgPro_DataMsgType DataMsgPro::PARITY;
const DataMsgPro_DataMsgType DataMsgPro::DataMsgType_MIN;
const DataMsgPro_DataMsgType DataMsgPro::DataMsgType_MAX;
const int DataMsgPro::DataMsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

DataMsgPro::DataMsgPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataMsgPro::InitAsDefaultInstance() {
}

DataMsgPro::DataMsgPro(const DataMsgPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataMsgPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataMsgPro::~DataMsgPro() {
  SharedDtor();
}

void DataMsgPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataMsgPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMsgPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataMsgPro_descriptor_;
}

const DataMsgPro& DataMsgPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DataMsgPro* DataMsgPro::default_instance_ = NULL;

DataMsgPro* DataMsgPro::New() const {
  return new DataMsgPro;
}

void DataMsgPro::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataMsgPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DataMsgPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataMsgPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataMsgPro::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMsgPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataMsgPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataMsgPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataMsgPro::MergeFrom(const DataMsgPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataMsgPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMsgPro::CopyFrom(const DataMsgPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMsgPro::IsInitialized() const {
  
  return true;
}

void DataMsgPro::Swap(DataMsgPro* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataMsgPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataMsgPro_descriptor_;
  metadata.reflection = DataMsgPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryRequestPro::kOsdIdFieldNumber;
const int ListDirectoryRequestPro::kDirectoryPathFieldNumber;
#endif  // !_MSC_VER

ListDirectoryRequestPro::ListDirectoryRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryRequestPro::InitAsDefaultInstance() {
}

ListDirectoryRequestPro::ListDirectoryRequestPro(const ListDirectoryRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryRequestPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  directorypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryRequestPro::~ListDirectoryRequestPro() {
  SharedDtor();
}

void ListDirectoryRequestPro::SharedDtor() {
  if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
    delete directorypath_;
  }
  if (this != default_instance_) {
  }
}

void ListDirectoryRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryRequestPro_descriptor_;
}

const ListDirectoryRequestPro& ListDirectoryRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryRequestPro* ListDirectoryRequestPro::default_instance_ = NULL;

ListDirectoryRequestPro* ListDirectoryRequestPro::New() const {
  return new ListDirectoryRequestPro;
}

void ListDirectoryRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    if (has_directorypath()) {
      if (directorypath_ != &::google::protobuf::internal::kEmptyString) {
        directorypath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directoryPath;
        break;
      }
      
      // optional string directoryPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directoryPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directorypath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directorypath().data(), this->directorypath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directorypath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional string directoryPath = 2;
  if (has_directorypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directorypath().data(), this->directorypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directorypath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional string directoryPath = 2;
    if (has_directorypath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directorypath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryRequestPro::MergeFrom(const ListDirectoryRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_directorypath()) {
      set_directorypath(from.directorypath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryRequestPro::CopyFrom(const ListDirectoryRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryRequestPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryRequestPro::Swap(ListDirectoryRequestPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(directorypath_, other->directorypath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryRequestPro_descriptor_;
  metadata.reflection = ListDirectoryRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileRequestPro::kClientIdFieldNumber;
const int UploadFileRequestPro::kFileSizeFieldNumber;
const int UploadFileRequestPro::kNumOfObjsFieldNumber;
const int UploadFileRequestPro::kPathFieldNumber;
#endif  // !_MSC_VER

UploadFileRequestPro::UploadFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileRequestPro::InitAsDefaultInstance() {
}

UploadFileRequestPro::UploadFileRequestPro(const UploadFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  numofobjs_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileRequestPro::~UploadFileRequestPro() {
  SharedDtor();
}

void UploadFileRequestPro::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void UploadFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileRequestPro_descriptor_;
}

const UploadFileRequestPro& UploadFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadFileRequestPro* UploadFileRequestPro::default_instance_ = NULL;

UploadFileRequestPro* UploadFileRequestPro::New() const {
  return new UploadFileRequestPro;
}

void UploadFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    numofobjs_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_numOfObjs;
        break;
      }
      
      // optional fixed32 numOfObjs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numOfObjs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobjs_)));
          set_has_numofobjs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }
      
      // optional string path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional fixed32 numOfObjs = 3;
  if (has_numofobjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->numofobjs(), output);
  }
  
  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional fixed32 numOfObjs = 3;
  if (has_numofobjs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->numofobjs(), target);
  }
  
  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 numOfObjs = 3;
    if (has_numofobjs()) {
      total_size += 1 + 4;
    }
    
    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileRequestPro::MergeFrom(const UploadFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_numofobjs()) {
      set_numofobjs(from.numofobjs());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileRequestPro::CopyFrom(const UploadFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRequestPro::IsInitialized() const {
  
  return true;
}

void UploadFileRequestPro::Swap(UploadFileRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(filesize_, other->filesize_);
    std::swap(numofobjs_, other->numofobjs_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileRequestPro_descriptor_;
  metadata.reflection = UploadFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFileRequestPro::kClientIdFieldNumber;
const int DeleteFileRequestPro::kFileIdFieldNumber;
const int DeleteFileRequestPro::kPathFieldNumber;
#endif  // !_MSC_VER

DeleteFileRequestPro::DeleteFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFileRequestPro::InitAsDefaultInstance() {
}

DeleteFileRequestPro::DeleteFileRequestPro(const DeleteFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  fileid_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFileRequestPro::~DeleteFileRequestPro() {
  SharedDtor();
}

void DeleteFileRequestPro::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void DeleteFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileRequestPro_descriptor_;
}

const DeleteFileRequestPro& DeleteFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DeleteFileRequestPro* DeleteFileRequestPro::default_instance_ = NULL;

DeleteFileRequestPro* DeleteFileRequestPro::New() const {
  return new DeleteFileRequestPro;
}

void DeleteFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    fileid_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fileId;
        break;
      }
      
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFileRequestPro::MergeFrom(const DeleteFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileRequestPro::CopyFrom(const DeleteFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileRequestPro::IsInitialized() const {
  
  return true;
}

void DeleteFileRequestPro::Swap(DeleteFileRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileRequestPro_descriptor_;
  metadata.reflection = DeleteFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameFileRequestPro::kClientIdFieldNumber;
const int RenameFileRequestPro::kFileIdFieldNumber;
const int RenameFileRequestPro::kPathFieldNumber;
const int RenameFileRequestPro::kNewPathFieldNumber;
#endif  // !_MSC_VER

RenameFileRequestPro::RenameFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameFileRequestPro::InitAsDefaultInstance() {
}

RenameFileRequestPro::RenameFileRequestPro(const RenameFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  fileid_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameFileRequestPro::~RenameFileRequestPro() {
  SharedDtor();
}

void RenameFileRequestPro::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (newpath_ != &::google::protobuf::internal::kEmptyString) {
    delete newpath_;
  }
  if (this != default_instance_) {
  }
}

void RenameFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameFileRequestPro_descriptor_;
}

const RenameFileRequestPro& RenameFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RenameFileRequestPro* RenameFileRequestPro::default_instance_ = NULL;

RenameFileRequestPro* RenameFileRequestPro::New() const {
  return new RenameFileRequestPro;
}

void RenameFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    fileid_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_newpath()) {
      if (newpath_ != &::google::protobuf::internal::kEmptyString) {
        newpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fileId;
        break;
      }
      
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newPath;
        break;
      }
      
      // optional string newPath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newpath().data(), this->newpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }
  
  // optional string newPath = 4;
  if (has_newpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpath().data(), this->newpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newpath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }
  
  // optional string newPath = 4;
  if (has_newpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpath().data(), this->newpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newpath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string newPath = 4;
    if (has_newpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameFileRequestPro::MergeFrom(const RenameFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_newpath()) {
      set_newpath(from.newpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameFileRequestPro::CopyFrom(const RenameFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameFileRequestPro::IsInitialized() const {
  
  return true;
}

void RenameFileRequestPro::Swap(RenameFileRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    std::swap(path_, other->path_);
    std::swap(newpath_, other->newpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameFileRequestPro_descriptor_;
  metadata.reflection = RenameFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadFileRequestPro::kClientIdFieldNumber;
const int DownloadFileRequestPro::kFileIdFieldNumber;
const int DownloadFileRequestPro::kFilePathFieldNumber;
#endif  // !_MSC_VER

DownloadFileRequestPro::DownloadFileRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadFileRequestPro::InitAsDefaultInstance() {
}

DownloadFileRequestPro::DownloadFileRequestPro(const DownloadFileRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadFileRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  fileid_ = 0u;
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFileRequestPro::~DownloadFileRequestPro() {
  SharedDtor();
}

void DownloadFileRequestPro::SharedDtor() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void DownloadFileRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFileRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileRequestPro_descriptor_;
}

const DownloadFileRequestPro& DownloadFileRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DownloadFileRequestPro* DownloadFileRequestPro::default_instance_ = NULL;

DownloadFileRequestPro* DownloadFileRequestPro::New() const {
  return new DownloadFileRequestPro;
}

void DownloadFileRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    fileid_ = 0u;
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFileRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fileId;
        break;
      }
      
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filePath;
        break;
      }
      
      // optional string filePath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadFileRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  // optional string filePath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filepath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadFileRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  // optional string filePath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filepath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadFileRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional string filePath = 3;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFileRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFileRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFileRequestPro::MergeFrom(const DownloadFileRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFileRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFileRequestPro::CopyFrom(const DownloadFileRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileRequestPro::IsInitialized() const {
  
  return true;
}

void DownloadFileRequestPro::Swap(DownloadFileRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFileRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFileRequestPro_descriptor_;
  metadata.reflection = DownloadFileRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveSegmentListRequestPro::kClientIdFieldNumber;
const int SaveSegmentListRequestPro::kFileIdFieldNumber;
const int SaveSegmentListRequestPro::kSegmentListFieldNumber;
#endif  // !_MSC_VER

SaveSegmentListRequestPro::SaveSegmentListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveSegmentListRequestPro::InitAsDefaultInstance() {
}

SaveSegmentListRequestPro::SaveSegmentListRequestPro(const SaveSegmentListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveSegmentListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  fileid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveSegmentListRequestPro::~SaveSegmentListRequestPro() {
  SharedDtor();
}

void SaveSegmentListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveSegmentListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveSegmentListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveSegmentListRequestPro_descriptor_;
}

const SaveSegmentListRequestPro& SaveSegmentListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SaveSegmentListRequestPro* SaveSegmentListRequestPro::default_instance_ = NULL;

SaveSegmentListRequestPro* SaveSegmentListRequestPro::New() const {
  return new SaveSegmentListRequestPro;
}

void SaveSegmentListRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    fileid_ = 0u;
  }
  segmentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveSegmentListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fileId;
        break;
      }
      
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_segmentList;
        break;
      }
      
      // repeated fixed64 segmentList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_segmentlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_segmentlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_segmentList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveSegmentListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  // repeated fixed64 segmentList = 3;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->segmentlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveSegmentListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  // repeated fixed64 segmentList = 3;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->segmentlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveSegmentListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed64 segmentList = 3;
  {
    int data_size = 0;
    data_size = 8 * this->segmentlist_size();
    total_size += 1 * this->segmentlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveSegmentListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveSegmentListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveSegmentListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveSegmentListRequestPro::MergeFrom(const SaveSegmentListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmentlist_.MergeFrom(from.segmentlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveSegmentListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveSegmentListRequestPro::CopyFrom(const SaveSegmentListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSegmentListRequestPro::IsInitialized() const {
  
  return true;
}

void SaveSegmentListRequestPro::Swap(SaveSegmentListRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    segmentlist_.Swap(&other->segmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveSegmentListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveSegmentListRequestPro_descriptor_;
  metadata.reflection = SaveSegmentListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFileSizeRequestPro::kClientIdFieldNumber;
const int SetFileSizeRequestPro::kFileIdFieldNumber;
const int SetFileSizeRequestPro::kFileSizeFieldNumber;
#endif  // !_MSC_VER

SetFileSizeRequestPro::SetFileSizeRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetFileSizeRequestPro::InitAsDefaultInstance() {
}

SetFileSizeRequestPro::SetFileSizeRequestPro(const SetFileSizeRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetFileSizeRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  fileid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFileSizeRequestPro::~SetFileSizeRequestPro() {
  SharedDtor();
}

void SetFileSizeRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetFileSizeRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFileSizeRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFileSizeRequestPro_descriptor_;
}

const SetFileSizeRequestPro& SetFileSizeRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SetFileSizeRequestPro* SetFileSizeRequestPro::default_instance_ = NULL;

SetFileSizeRequestPro* SetFileSizeRequestPro::New() const {
  return new SetFileSizeRequestPro;
}

void SetFileSizeRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    fileid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFileSizeRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fileId;
        break;
      }
      
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetFileSizeRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  // optional fixed64 fileSize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->filesize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetFileSizeRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  // optional fixed64 fileSize = 3;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->filesize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetFileSizeRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 3;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFileSizeRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFileSizeRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFileSizeRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFileSizeRequestPro::MergeFrom(const SetFileSizeRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFileSizeRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFileSizeRequestPro::CopyFrom(const SetFileSizeRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFileSizeRequestPro::IsInitialized() const {
  
  return true;
}

void SetFileSizeRequestPro::Swap(SetFileSizeRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(fileid_, other->fileid_);
    std::swap(filesize_, other->filesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFileSizeRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFileSizeRequestPro_descriptor_;
  metadata.reflection = SetFileSizeRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentIdListRequestPro::kClientIdFieldNumber;
const int GetSegmentIdListRequestPro::kNumOfObjsFieldNumber;
#endif  // !_MSC_VER

GetSegmentIdListRequestPro::GetSegmentIdListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentIdListRequestPro::InitAsDefaultInstance() {
}

GetSegmentIdListRequestPro::GetSegmentIdListRequestPro(const GetSegmentIdListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentIdListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  numofobjs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentIdListRequestPro::~GetSegmentIdListRequestPro() {
  SharedDtor();
}

void GetSegmentIdListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentIdListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentIdListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentIdListRequestPro_descriptor_;
}

const GetSegmentIdListRequestPro& GetSegmentIdListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentIdListRequestPro* GetSegmentIdListRequestPro::default_instance_ = NULL;

GetSegmentIdListRequestPro* GetSegmentIdListRequestPro::New() const {
  return new GetSegmentIdListRequestPro;
}

void GetSegmentIdListRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    numofobjs_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentIdListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_numOfObjs;
        break;
      }
      
      // optional fixed32 numOfObjs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numOfObjs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobjs_)));
          set_has_numofobjs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentIdListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }
  
  // optional fixed32 numOfObjs = 2;
  if (has_numofobjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->numofobjs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentIdListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }
  
  // optional fixed32 numOfObjs = 2;
  if (has_numofobjs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->numofobjs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentIdListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 numOfObjs = 2;
    if (has_numofobjs()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentIdListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentIdListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentIdListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentIdListRequestPro::MergeFrom(const GetSegmentIdListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_numofobjs()) {
      set_numofobjs(from.numofobjs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentIdListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentIdListRequestPro::CopyFrom(const GetSegmentIdListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentIdListRequestPro::IsInitialized() const {
  
  return true;
}

void GetSegmentIdListRequestPro::Swap(GetSegmentIdListRequestPro* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(numofobjs_, other->numofobjs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentIdListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentIdListRequestPro_descriptor_;
  metadata.reflection = GetSegmentIdListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PutSegmentInitRequestPro_CodingScheme_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitRequestPro_CodingScheme_descriptor_;
}
bool PutSegmentInitRequestPro_CodingScheme_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::RAID0_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::RAID1_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::RAID5_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::RS_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::EMBR_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::CAUCHY;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::EVENODD_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::RDP_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::DEFAULT_CODING;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::CodingScheme_MIN;
const PutSegmentInitRequestPro_CodingScheme PutSegmentInitRequestPro::CodingScheme_MAX;
const int PutSegmentInitRequestPro::CodingScheme_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PutSegmentInitRequestPro::kSegmentIdFieldNumber;
const int PutSegmentInitRequestPro::kSegmentSizeFieldNumber;
const int PutSegmentInitRequestPro::kChunkCountFieldNumber;
const int PutSegmentInitRequestPro::kCodingSchemeFieldNumber;
const int PutSegmentInitRequestPro::kCodingSettingFieldNumber;
const int PutSegmentInitRequestPro::kDataMsgTypeFieldNumber;
const int PutSegmentInitRequestPro::kUpdateKeyFieldNumber;
const int PutSegmentInitRequestPro::kBufferSizeFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitRequestPro::PutSegmentInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitRequestPro::InitAsDefaultInstance() {
}

PutSegmentInitRequestPro::PutSegmentInitRequestPro(const PutSegmentInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  segmentsize_ = 0u;
  chunkcount_ = 0u;
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffersize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitRequestPro::~PutSegmentInitRequestPro() {
  SharedDtor();
}

void PutSegmentInitRequestPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (this != default_instance_) {
  }
}

void PutSegmentInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitRequestPro_descriptor_;
}

const PutSegmentInitRequestPro& PutSegmentInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitRequestPro* PutSegmentInitRequestPro::default_instance_ = NULL;

PutSegmentInitRequestPro* PutSegmentInitRequestPro::New() const {
  return new PutSegmentInitRequestPro;
}

void PutSegmentInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    segmentsize_ = 0u;
    chunkcount_ = 0u;
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
    buffersize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutSegmentInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutSegmentInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_bufferSize;
        break;
      }
      
      // optional fixed32 bufferSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bufferSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &buffersize_)));
          set_has_buffersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 segmentSize = 2;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentsize(), output);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->chunkcount(), output);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 4;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 5;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->codingsetting(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 7;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 8;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->updatekey(), output);
  }
  
  // optional fixed32 bufferSize = 9;
  if (has_buffersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->buffersize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 segmentSize = 2;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentsize(), target);
  }
  
  // optional fixed32 chunkCount = 3;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->chunkcount(), target);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 4;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 5;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->codingsetting(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 7;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 8;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->updatekey(), target);
  }
  
  // optional fixed32 bufferSize = 9;
  if (has_buffersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->buffersize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentSize = 2;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 3;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 4;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 5;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 7;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 8;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
    // optional fixed32 bufferSize = 9;
    if (has_buffersize()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitRequestPro::MergeFrom(const PutSegmentInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
    if (from.has_buffersize()) {
      set_buffersize(from.buffersize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitRequestPro::CopyFrom(const PutSegmentInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitRequestPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitRequestPro::Swap(PutSegmentInitRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    std::swap(buffersize_, other->buffersize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitRequestPro_descriptor_;
  metadata.reflection = PutSegmentInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentDataPro::kSegmentIdFieldNumber;
const int SegmentDataPro::kOffsetFieldNumber;
const int SegmentDataPro::kLengthFieldNumber;
const int SegmentDataPro::kDataMsgTypeFieldNumber;
const int SegmentDataPro::kUpdateKeyFieldNumber;
#endif  // !_MSC_VER

SegmentDataPro::SegmentDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentDataPro::InitAsDefaultInstance() {
}

SegmentDataPro::SegmentDataPro(const SegmentDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentDataPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentDataPro::~SegmentDataPro() {
  SharedDtor();
}

void SegmentDataPro::SharedDtor() {
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (this != default_instance_) {
  }
}

void SegmentDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentDataPro_descriptor_;
}

const SegmentDataPro& SegmentDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentDataPro* SegmentDataPro::default_instance_ = NULL;

SegmentDataPro* SegmentDataPro::New() const {
  return new SegmentDataPro;
}

void SegmentDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->offset(), output);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->length(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 5;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->updatekey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->offset(), target);
  }
  
  // optional fixed32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->length(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 5;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->updatekey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 offset = 2;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 3;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 5;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentDataPro::MergeFrom(const SegmentDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentDataPro::CopyFrom(const SegmentDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentDataPro::IsInitialized() const {
  
  return true;
}

void SegmentDataPro::Swap(SegmentDataPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentDataPro_descriptor_;
  metadata.reflection = SegmentDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentRequestPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

GetSegmentRequestPro::GetSegmentRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentRequestPro::InitAsDefaultInstance() {
}

GetSegmentRequestPro::GetSegmentRequestPro(const GetSegmentRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentRequestPro::~GetSegmentRequestPro() {
  SharedDtor();
}

void GetSegmentRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentRequestPro_descriptor_;
}

const GetSegmentRequestPro& GetSegmentRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentRequestPro* GetSegmentRequestPro::default_instance_ = NULL;

GetSegmentRequestPro* GetSegmentRequestPro::New() const {
  return new GetSegmentRequestPro;
}

void GetSegmentRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentRequestPro::MergeFrom(const GetSegmentRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentRequestPro::CopyFrom(const GetSegmentRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentRequestPro::IsInitialized() const {
  
  return true;
}

void GetSegmentRequestPro::Swap(GetSegmentRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentRequestPro_descriptor_;
  metadata.reflection = GetSegmentRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentTransferEndRequestPro::kSegmentIdFieldNumber;
const int SegmentTransferEndRequestPro::kDataMsgTypeFieldNumber;
const int SegmentTransferEndRequestPro::kUpdateKeyFieldNumber;
const int SegmentTransferEndRequestPro::kOffsetLengthFieldNumber;
#endif  // !_MSC_VER

SegmentTransferEndRequestPro::SegmentTransferEndRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentTransferEndRequestPro::InitAsDefaultInstance() {
}

SegmentTransferEndRequestPro::SegmentTransferEndRequestPro(const SegmentTransferEndRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentTransferEndRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentTransferEndRequestPro::~SegmentTransferEndRequestPro() {
  SharedDtor();
}

void SegmentTransferEndRequestPro::SharedDtor() {
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (this != default_instance_) {
  }
}

void SegmentTransferEndRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentTransferEndRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentTransferEndRequestPro_descriptor_;
}

const SegmentTransferEndRequestPro& SegmentTransferEndRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentTransferEndRequestPro* SegmentTransferEndRequestPro::default_instance_ = NULL;

SegmentTransferEndRequestPro* SegmentTransferEndRequestPro::New() const {
  return new SegmentTransferEndRequestPro;
}

void SegmentTransferEndRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
  }
  offsetlength_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentTransferEndRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_offsetLength;
        break;
      }
      
      // repeated .ncvfs.OffsetLengthPro offsetLength = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offsetLength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsetlength()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_offsetLength;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentTransferEndRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 5;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->updatekey(), output);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 6;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->offsetlength(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentTransferEndRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 5;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->updatekey(), target);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 6;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->offsetlength(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentTransferEndRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 5;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
  }
  // repeated .ncvfs.OffsetLengthPro offsetLength = 6;
  total_size += 1 * this->offsetlength_size();
  for (int i = 0; i < this->offsetlength_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsetlength(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentTransferEndRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentTransferEndRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentTransferEndRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentTransferEndRequestPro::MergeFrom(const SegmentTransferEndRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  offsetlength_.MergeFrom(from.offsetlength_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentTransferEndRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTransferEndRequestPro::CopyFrom(const SegmentTransferEndRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTransferEndRequestPro::IsInitialized() const {
  
  return true;
}

void SegmentTransferEndRequestPro::Swap(SegmentTransferEndRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    offsetlength_.Swap(&other->offsetlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentTransferEndRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentTransferEndRequestPro_descriptor_;
  metadata.reflection = SegmentTransferEndRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSmallSegmentRequestPro::kSegmentIdFieldNumber;
const int PutSmallSegmentRequestPro::kSegmentSizeFieldNumber;
const int PutSmallSegmentRequestPro::kCodingSchemeFieldNumber;
const int PutSmallSegmentRequestPro::kCodingSettingFieldNumber;
const int PutSmallSegmentRequestPro::kDataMsgTypeFieldNumber;
const int PutSmallSegmentRequestPro::kUpdateKeyFieldNumber;
const int PutSmallSegmentRequestPro::kBufferSizeFieldNumber;
const int PutSmallSegmentRequestPro::kOffsetLengthFieldNumber;
#endif  // !_MSC_VER

PutSmallSegmentRequestPro::PutSmallSegmentRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSmallSegmentRequestPro::InitAsDefaultInstance() {
}

PutSmallSegmentRequestPro::PutSmallSegmentRequestPro(const PutSmallSegmentRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSmallSegmentRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  segmentsize_ = 0u;
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffersize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSmallSegmentRequestPro::~PutSmallSegmentRequestPro() {
  SharedDtor();
}

void PutSmallSegmentRequestPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (this != default_instance_) {
  }
}

void PutSmallSegmentRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSmallSegmentRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSmallSegmentRequestPro_descriptor_;
}

const PutSmallSegmentRequestPro& PutSmallSegmentRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSmallSegmentRequestPro* PutSmallSegmentRequestPro::default_instance_ = NULL;

PutSmallSegmentRequestPro* PutSmallSegmentRequestPro::New() const {
  return new PutSmallSegmentRequestPro;
}

void PutSmallSegmentRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    segmentsize_ = 0u;
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
    buffersize_ = 0u;
  }
  offsetlength_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSmallSegmentRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutSegmentInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutSegmentInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_bufferSize;
        break;
      }
      
      // optional fixed32 bufferSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bufferSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &buffersize_)));
          set_has_buffersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_offsetLength;
        break;
      }
      
      // repeated .ncvfs.OffsetLengthPro offsetLength = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offsetLength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsetlength()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_offsetLength;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSmallSegmentRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 segmentSize = 2;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->segmentsize(), output);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 4;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->codingsetting(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 6;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->updatekey(), output);
  }
  
  // optional fixed32 bufferSize = 7;
  if (has_buffersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->buffersize(), output);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 8;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->offsetlength(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSmallSegmentRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 segmentSize = 2;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->segmentsize(), target);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 4;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->codingsetting(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 6;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->updatekey(), target);
  }
  
  // optional fixed32 bufferSize = 7;
  if (has_buffersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->buffersize(), target);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 8;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->offsetlength(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSmallSegmentRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 segmentSize = 2;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 4;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 6;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
    // optional fixed32 bufferSize = 7;
    if (has_buffersize()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .ncvfs.OffsetLengthPro offsetLength = 8;
  total_size += 1 * this->offsetlength_size();
  for (int i = 0; i < this->offsetlength_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsetlength(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSmallSegmentRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSmallSegmentRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSmallSegmentRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSmallSegmentRequestPro::MergeFrom(const PutSmallSegmentRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  offsetlength_.MergeFrom(from.offsetlength_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
    if (from.has_buffersize()) {
      set_buffersize(from.buffersize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSmallSegmentRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSmallSegmentRequestPro::CopyFrom(const PutSmallSegmentRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSmallSegmentRequestPro::IsInitialized() const {
  
  return true;
}

void PutSmallSegmentRequestPro::Swap(PutSmallSegmentRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    std::swap(buffersize_, other->buffersize_);
    offsetlength_.Swap(&other->offsetlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSmallSegmentRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSmallSegmentRequestPro_descriptor_;
  metadata.reflection = PutSmallSegmentRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetOsdListRequestPro::GetOsdListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOsdListRequestPro::InitAsDefaultInstance() {
}

GetOsdListRequestPro::GetOsdListRequestPro(const GetOsdListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOsdListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOsdListRequestPro::~GetOsdListRequestPro() {
  SharedDtor();
}

void GetOsdListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOsdListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOsdListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOsdListRequestPro_descriptor_;
}

const GetOsdListRequestPro& GetOsdListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetOsdListRequestPro* GetOsdListRequestPro::default_instance_ = NULL;

GetOsdListRequestPro* GetOsdListRequestPro::New() const {
  return new GetOsdListRequestPro;
}

void GetOsdListRequestPro::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOsdListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetOsdListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOsdListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOsdListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOsdListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOsdListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOsdListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOsdListRequestPro::MergeFrom(const GetOsdListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOsdListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOsdListRequestPro::CopyFrom(const GetOsdListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOsdListRequestPro::IsInitialized() const {
  
  return true;
}

void GetOsdListRequestPro::Swap(GetOsdListRequestPro* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOsdListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOsdListRequestPro_descriptor_;
  metadata.reflection = GetOsdListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListDirectoryReplyPro::kFileInfoProFieldNumber;
#endif  // !_MSC_VER

ListDirectoryReplyPro::ListDirectoryReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListDirectoryReplyPro::InitAsDefaultInstance() {
}

ListDirectoryReplyPro::ListDirectoryReplyPro(const ListDirectoryReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListDirectoryReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListDirectoryReplyPro::~ListDirectoryReplyPro() {
  SharedDtor();
}

void ListDirectoryReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListDirectoryReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDirectoryReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListDirectoryReplyPro_descriptor_;
}

const ListDirectoryReplyPro& ListDirectoryReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ListDirectoryReplyPro* ListDirectoryReplyPro::default_instance_ = NULL;

ListDirectoryReplyPro* ListDirectoryReplyPro::New() const {
  return new ListDirectoryReplyPro;
}

void ListDirectoryReplyPro::Clear() {
  fileinfopro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListDirectoryReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileInfoPro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileinfopro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fileInfoPro;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListDirectoryReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileinfopro(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListDirectoryReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileinfopro(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListDirectoryReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.FileInfoPro fileInfoPro = 1;
  total_size += 1 * this->fileinfopro_size();
  for (int i = 0; i < this->fileinfopro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileinfopro(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDirectoryReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListDirectoryReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListDirectoryReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListDirectoryReplyPro::MergeFrom(const ListDirectoryReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileinfopro_.MergeFrom(from.fileinfopro_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListDirectoryReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDirectoryReplyPro::CopyFrom(const ListDirectoryReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDirectoryReplyPro::IsInitialized() const {
  
  return true;
}

void ListDirectoryReplyPro::Swap(ListDirectoryReplyPro* other) {
  if (other != this) {
    fileinfopro_.Swap(&other->fileinfopro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListDirectoryReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListDirectoryReplyPro_descriptor_;
  metadata.reflection = ListDirectoryReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfoPro::kFileIdFieldNumber;
const int FileInfoPro::kFileSizeFieldNumber;
const int FileInfoPro::kFileNameFieldNumber;
#endif  // !_MSC_VER

FileInfoPro::FileInfoPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfoPro::InitAsDefaultInstance() {
}

FileInfoPro::FileInfoPro(const FileInfoPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfoPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  filesize_ = GOOGLE_ULONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfoPro::~FileInfoPro() {
  SharedDtor();
}

void FileInfoPro::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void FileInfoPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfoPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfoPro_descriptor_;
}

const FileInfoPro& FileInfoPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

FileInfoPro* FileInfoPro::default_instance_ = NULL;

FileInfoPro* FileInfoPro::New() const {
  return new FileInfoPro;
}

void FileInfoPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    filesize_ = GOOGLE_ULONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfoPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }
      
      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfoPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->filesize(), output);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfoPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // optional fixed64 fileSize = 2;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->filesize(), target);
  }
  
  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfoPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 fileSize = 2;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfoPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfoPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfoPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfoPro::MergeFrom(const FileInfoPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfoPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoPro::CopyFrom(const FileInfoPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoPro::IsInitialized() const {
  
  return true;
}

void FileInfoPro::Swap(FileInfoPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(filesize_, other->filesize_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfoPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfoPro_descriptor_;
  metadata.reflection = FileInfoPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockLocationPro::kOsdIdFieldNumber;
const int BlockLocationPro::kBlockIdFieldNumber;
#endif  // !_MSC_VER

BlockLocationPro::BlockLocationPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockLocationPro::InitAsDefaultInstance() {
}

BlockLocationPro::BlockLocationPro(const BlockLocationPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockLocationPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  blockid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockLocationPro::~BlockLocationPro() {
  SharedDtor();
}

void BlockLocationPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockLocationPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockLocationPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockLocationPro_descriptor_;
}

const BlockLocationPro& BlockLocationPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BlockLocationPro* BlockLocationPro::default_instance_ = NULL;

BlockLocationPro* BlockLocationPro::New() const {
  return new BlockLocationPro;
}

void BlockLocationPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    blockid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockLocationPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockLocationPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockLocationPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockLocationPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockLocationPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockLocationPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockLocationPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockLocationPro::MergeFrom(const BlockLocationPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockLocationPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockLocationPro::CopyFrom(const BlockLocationPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLocationPro::IsInitialized() const {
  
  return true;
}

void BlockLocationPro::Swap(BlockLocationPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(blockid_, other->blockid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockLocationPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockLocationPro_descriptor_;
  metadata.reflection = BlockLocationPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadFileReplyPro::kFileIdFieldNumber;
const int UploadFileReplyPro::kSegmentListFieldNumber;
const int UploadFileReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

UploadFileReplyPro::UploadFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadFileReplyPro::InitAsDefaultInstance() {
}

UploadFileReplyPro::UploadFileReplyPro(const UploadFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadFileReplyPro::~UploadFileReplyPro() {
  SharedDtor();
}

void UploadFileReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadFileReplyPro_descriptor_;
}

const UploadFileReplyPro& UploadFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadFileReplyPro* UploadFileReplyPro::default_instance_ = NULL;

UploadFileReplyPro* UploadFileReplyPro::New() const {
  return new UploadFileReplyPro;
}

void UploadFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
  }
  segmentlist_.Clear();
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_segmentList;
        break;
      }
      
      // repeated fixed64 segmentList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_segmentlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_segmentlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_segmentList;
        if (input->ExpectTag(29)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // repeated fixed64 segmentList = 2;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->segmentlist(i), output);
  }
  
  // repeated fixed32 primaryList = 3;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // repeated fixed64 segmentList = 2;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->segmentlist(i), target);
  }
  
  // repeated fixed32 primaryList = 3;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed64 segmentList = 2;
  {
    int data_size = 0;
    data_size = 8 * this->segmentlist_size();
    total_size += 1 * this->segmentlist_size() + data_size;
  }
  
  // repeated fixed32 primaryList = 3;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadFileReplyPro::MergeFrom(const UploadFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmentlist_.MergeFrom(from.segmentlist_);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadFileReplyPro::CopyFrom(const UploadFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileReplyPro::IsInitialized() const {
  
  return true;
}

void UploadFileReplyPro::Swap(UploadFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    segmentlist_.Swap(&other->segmentlist_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadFileReplyPro_descriptor_;
  metadata.reflection = UploadFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFileReplyPro::kFileIdFieldNumber;
const int DeleteFileReplyPro::kPathFieldNumber;
#endif  // !_MSC_VER

DeleteFileReplyPro::DeleteFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFileReplyPro::InitAsDefaultInstance() {
}

DeleteFileReplyPro::DeleteFileReplyPro(const DeleteFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFileReplyPro::~DeleteFileReplyPro() {
  SharedDtor();
}

void DeleteFileReplyPro::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void DeleteFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFileReplyPro_descriptor_;
}

const DeleteFileReplyPro& DeleteFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DeleteFileReplyPro* DeleteFileReplyPro::default_instance_ = NULL;

DeleteFileReplyPro* DeleteFileReplyPro::New() const {
  return new DeleteFileReplyPro;
}

void DeleteFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFileReplyPro::MergeFrom(const DeleteFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFileReplyPro::CopyFrom(const DeleteFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFileReplyPro::IsInitialized() const {
  
  return true;
}

void DeleteFileReplyPro::Swap(DeleteFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFileReplyPro_descriptor_;
  metadata.reflection = DeleteFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameFileReplyPro::kFileIdFieldNumber;
#endif  // !_MSC_VER

RenameFileReplyPro::RenameFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameFileReplyPro::InitAsDefaultInstance() {
}

RenameFileReplyPro::RenameFileReplyPro(const RenameFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameFileReplyPro::~RenameFileReplyPro() {
  SharedDtor();
}

void RenameFileReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RenameFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameFileReplyPro_descriptor_;
}

const RenameFileReplyPro& RenameFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RenameFileReplyPro* RenameFileReplyPro::default_instance_ = NULL;

RenameFileReplyPro* RenameFileReplyPro::New() const {
  return new RenameFileReplyPro;
}

void RenameFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameFileReplyPro::MergeFrom(const RenameFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameFileReplyPro::CopyFrom(const RenameFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameFileReplyPro::IsInitialized() const {
  
  return true;
}

void RenameFileReplyPro::Swap(RenameFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameFileReplyPro_descriptor_;
  metadata.reflection = RenameFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveSegmentListReplyPro::kFileIdFieldNumber;
#endif  // !_MSC_VER

SaveSegmentListReplyPro::SaveSegmentListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveSegmentListReplyPro::InitAsDefaultInstance() {
}

SaveSegmentListReplyPro::SaveSegmentListReplyPro(const SaveSegmentListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveSegmentListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveSegmentListReplyPro::~SaveSegmentListReplyPro() {
  SharedDtor();
}

void SaveSegmentListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveSegmentListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveSegmentListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveSegmentListReplyPro_descriptor_;
}

const SaveSegmentListReplyPro& SaveSegmentListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SaveSegmentListReplyPro* SaveSegmentListReplyPro::default_instance_ = NULL;

SaveSegmentListReplyPro* SaveSegmentListReplyPro::New() const {
  return new SaveSegmentListReplyPro;
}

void SaveSegmentListReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveSegmentListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveSegmentListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->fileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveSegmentListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 1;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->fileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveSegmentListReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 1;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveSegmentListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveSegmentListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveSegmentListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveSegmentListReplyPro::MergeFrom(const SaveSegmentListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveSegmentListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveSegmentListReplyPro::CopyFrom(const SaveSegmentListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSegmentListReplyPro::IsInitialized() const {
  
  return true;
}

void SaveSegmentListReplyPro::Swap(SaveSegmentListReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveSegmentListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveSegmentListReplyPro_descriptor_;
  metadata.reflection = SaveSegmentListReplyPro_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DownloadFileReplyPro_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileReplyPro_FileType_descriptor_;
}
bool DownloadFileReplyPro_FileType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DownloadFileReplyPro_FileType DownloadFileReplyPro::NEWFILE;
const DownloadFileReplyPro_FileType DownloadFileReplyPro::NORMAL;
const DownloadFileReplyPro_FileType DownloadFileReplyPro::FOLDER;
const DownloadFileReplyPro_FileType DownloadFileReplyPro::FileType_MIN;
const DownloadFileReplyPro_FileType DownloadFileReplyPro::FileType_MAX;
const int DownloadFileReplyPro::FileType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DownloadFileReplyPro::kFileIdFieldNumber;
const int DownloadFileReplyPro::kFilePathFieldNumber;
const int DownloadFileReplyPro::kFileSizeFieldNumber;
const int DownloadFileReplyPro::kFileTypeFieldNumber;
const int DownloadFileReplyPro::kSegmentListFieldNumber;
const int DownloadFileReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

DownloadFileReplyPro::DownloadFileReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadFileReplyPro::InitAsDefaultInstance() {
}

DownloadFileReplyPro::DownloadFileReplyPro(const DownloadFileReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadFileReplyPro::SharedCtor() {
  _cached_size_ = 0;
  fileid_ = 0u;
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesize_ = GOOGLE_ULONGLONG(0);
  filetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadFileReplyPro::~DownloadFileReplyPro() {
  SharedDtor();
}

void DownloadFileReplyPro::SharedDtor() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void DownloadFileReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadFileReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadFileReplyPro_descriptor_;
}

const DownloadFileReplyPro& DownloadFileReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

DownloadFileReplyPro* DownloadFileReplyPro::default_instance_ = NULL;

DownloadFileReplyPro* DownloadFileReplyPro::New() const {
  return new DownloadFileReplyPro;
}

void DownloadFileReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fileid_ = 0u;
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
    filesize_ = GOOGLE_ULONGLONG(0);
    filetype_ = 1;
  }
  segmentlist_.Clear();
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadFileReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 fileId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filePath;
        break;
      }
      
      // optional string filePath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_fileSize;
        break;
      }
      
      // optional fixed64 fileSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fileSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fileType;
        break;
      }
      
      // optional .ncvfs.DownloadFileReplyPro.FileType fileType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DownloadFileReplyPro_FileType_IsValid(value)) {
            set_filetype(static_cast< ::ncvfs::DownloadFileReplyPro_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_segmentList;
        break;
      }
      
      // repeated fixed64 segmentList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 57, input, this->mutable_segmentlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_segmentlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_segmentList;
        if (input->ExpectTag(69)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 69, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadFileReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fileid(), output);
  }
  
  // optional string filePath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filepath(), output);
  }
  
  // optional fixed64 fileSize = 4;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->filesize(), output);
  }
  
  // optional .ncvfs.DownloadFileReplyPro.FileType fileType = 5;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->filetype(), output);
  }
  
  // repeated fixed64 segmentList = 7;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      7, this->segmentlist(i), output);
  }
  
  // repeated fixed32 primaryList = 8;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      8, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadFileReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 fileId = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fileid(), target);
  }
  
  // optional string filePath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filepath(), target);
  }
  
  // optional fixed64 fileSize = 4;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->filesize(), target);
  }
  
  // optional .ncvfs.DownloadFileReplyPro.FileType fileType = 5;
  if (has_filetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->filetype(), target);
  }
  
  // repeated fixed64 segmentList = 7;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(7, this->segmentlist(i), target);
  }
  
  // repeated fixed32 primaryList = 8;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(8, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadFileReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 fileId = 2;
    if (has_fileid()) {
      total_size += 1 + 4;
    }
    
    // optional string filePath = 3;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
    // optional fixed64 fileSize = 4;
    if (has_filesize()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.DownloadFileReplyPro.FileType fileType = 5;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
    }
    
  }
  // repeated fixed64 segmentList = 7;
  {
    int data_size = 0;
    data_size = 8 * this->segmentlist_size();
    total_size += 1 * this->segmentlist_size() + data_size;
  }
  
  // repeated fixed32 primaryList = 8;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadFileReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadFileReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadFileReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadFileReplyPro::MergeFrom(const DownloadFileReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmentlist_.MergeFrom(from.segmentlist_);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadFileReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadFileReplyPro::CopyFrom(const DownloadFileReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileReplyPro::IsInitialized() const {
  
  return true;
}

void DownloadFileReplyPro::Swap(DownloadFileReplyPro* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(filepath_, other->filepath_);
    std::swap(filesize_, other->filesize_);
    std::swap(filetype_, other->filetype_);
    segmentlist_.Swap(&other->segmentlist_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadFileReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadFileReplyPro_descriptor_;
  metadata.reflection = DownloadFileReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentIdListReplyPro::kSegmentIdListFieldNumber;
const int GetSegmentIdListReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

GetSegmentIdListReplyPro::GetSegmentIdListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentIdListReplyPro::InitAsDefaultInstance() {
}

GetSegmentIdListReplyPro::GetSegmentIdListReplyPro(const GetSegmentIdListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentIdListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentIdListReplyPro::~GetSegmentIdListReplyPro() {
  SharedDtor();
}

void GetSegmentIdListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentIdListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentIdListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentIdListReplyPro_descriptor_;
}

const GetSegmentIdListReplyPro& GetSegmentIdListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentIdListReplyPro* GetSegmentIdListReplyPro::default_instance_ = NULL;

GetSegmentIdListReplyPro* GetSegmentIdListReplyPro::New() const {
  return new GetSegmentIdListReplyPro;
}

void GetSegmentIdListReplyPro::Clear() {
  segmentidlist_.Clear();
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentIdListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 segmentIdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_segmentidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_segmentidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_segmentIdList;
        if (input->ExpectTag(21)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentIdListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 segmentIdList = 1;
  for (int i = 0; i < this->segmentidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->segmentidlist(i), output);
  }
  
  // repeated fixed32 primaryList = 2;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentIdListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 segmentIdList = 1;
  for (int i = 0; i < this->segmentidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->segmentidlist(i), target);
  }
  
  // repeated fixed32 primaryList = 2;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentIdListReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed64 segmentIdList = 1;
  {
    int data_size = 0;
    data_size = 8 * this->segmentidlist_size();
    total_size += 1 * this->segmentidlist_size() + data_size;
  }
  
  // repeated fixed32 primaryList = 2;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentIdListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentIdListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentIdListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentIdListReplyPro::MergeFrom(const GetSegmentIdListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmentidlist_.MergeFrom(from.segmentidlist_);
  primarylist_.MergeFrom(from.primarylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentIdListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentIdListReplyPro::CopyFrom(const GetSegmentIdListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentIdListReplyPro::IsInitialized() const {
  
  return true;
}

void GetSegmentIdListReplyPro::Swap(GetSegmentIdListReplyPro* other) {
  if (other != this) {
    segmentidlist_.Swap(&other->segmentidlist_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentIdListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentIdListReplyPro_descriptor_;
  metadata.reflection = GetSegmentIdListReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwitchPrimaryOsdReplyPro::kNewPrimaryOsdIdFieldNumber;
#endif  // !_MSC_VER

SwitchPrimaryOsdReplyPro::SwitchPrimaryOsdReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchPrimaryOsdReplyPro::InitAsDefaultInstance() {
}

SwitchPrimaryOsdReplyPro::SwitchPrimaryOsdReplyPro(const SwitchPrimaryOsdReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchPrimaryOsdReplyPro::SharedCtor() {
  _cached_size_ = 0;
  newprimaryosdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchPrimaryOsdReplyPro::~SwitchPrimaryOsdReplyPro() {
  SharedDtor();
}

void SwitchPrimaryOsdReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwitchPrimaryOsdReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchPrimaryOsdReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchPrimaryOsdReplyPro_descriptor_;
}

const SwitchPrimaryOsdReplyPro& SwitchPrimaryOsdReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SwitchPrimaryOsdReplyPro* SwitchPrimaryOsdReplyPro::default_instance_ = NULL;

SwitchPrimaryOsdReplyPro* SwitchPrimaryOsdReplyPro::New() const {
  return new SwitchPrimaryOsdReplyPro;
}

void SwitchPrimaryOsdReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newprimaryosdid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchPrimaryOsdReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 newPrimaryOsdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &newprimaryosdid_)));
          set_has_newprimaryosdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchPrimaryOsdReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 newPrimaryOsdId = 1;
  if (has_newprimaryosdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->newprimaryosdid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchPrimaryOsdReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 newPrimaryOsdId = 1;
  if (has_newprimaryosdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->newprimaryosdid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchPrimaryOsdReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 newPrimaryOsdId = 1;
    if (has_newprimaryosdid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchPrimaryOsdReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchPrimaryOsdReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchPrimaryOsdReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchPrimaryOsdReplyPro::MergeFrom(const SwitchPrimaryOsdReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newprimaryosdid()) {
      set_newprimaryosdid(from.newprimaryosdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchPrimaryOsdReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchPrimaryOsdReplyPro::CopyFrom(const SwitchPrimaryOsdReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPrimaryOsdReplyPro::IsInitialized() const {
  
  return true;
}

void SwitchPrimaryOsdReplyPro::Swap(SwitchPrimaryOsdReplyPro* other) {
  if (other != this) {
    std::swap(newprimaryosdid_, other->newprimaryosdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchPrimaryOsdReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchPrimaryOsdReplyPro_descriptor_;
  metadata.reflection = SwitchPrimaryOsdReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadSegmentAckReplyPro::kSegmentIdFieldNumber;
#endif  // !_MSC_VER

UploadSegmentAckReplyPro::UploadSegmentAckReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadSegmentAckReplyPro::InitAsDefaultInstance() {
}

UploadSegmentAckReplyPro::UploadSegmentAckReplyPro(const UploadSegmentAckReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadSegmentAckReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadSegmentAckReplyPro::~UploadSegmentAckReplyPro() {
  SharedDtor();
}

void UploadSegmentAckReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadSegmentAckReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadSegmentAckReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadSegmentAckReplyPro_descriptor_;
}

const UploadSegmentAckReplyPro& UploadSegmentAckReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadSegmentAckReplyPro* UploadSegmentAckReplyPro::default_instance_ = NULL;

UploadSegmentAckReplyPro* UploadSegmentAckReplyPro::New() const {
  return new UploadSegmentAckReplyPro;
}

void UploadSegmentAckReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadSegmentAckReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadSegmentAckReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadSegmentAckReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadSegmentAckReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadSegmentAckReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadSegmentAckReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadSegmentAckReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadSegmentAckReplyPro::MergeFrom(const UploadSegmentAckReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadSegmentAckReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadSegmentAckReplyPro::CopyFrom(const UploadSegmentAckReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadSegmentAckReplyPro::IsInitialized() const {
  
  return true;
}

void UploadSegmentAckReplyPro::Swap(UploadSegmentAckReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadSegmentAckReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadSegmentAckReplyPro_descriptor_;
  metadata.reflection = UploadSegmentAckReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentInfoReplyPro::kSegmentIdFieldNumber;
const int GetSegmentInfoReplyPro::kNodeListFieldNumber;
const int GetSegmentInfoReplyPro::kCodingSchemeFieldNumber;
const int GetSegmentInfoReplyPro::kCodingSettingFieldNumber;
const int GetSegmentInfoReplyPro::kSegmentSizeFieldNumber;
#endif  // !_MSC_VER

GetSegmentInfoReplyPro::GetSegmentInfoReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentInfoReplyPro::InitAsDefaultInstance() {
}

GetSegmentInfoReplyPro::GetSegmentInfoReplyPro(const GetSegmentInfoReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentInfoReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  segmentsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentInfoReplyPro::~GetSegmentInfoReplyPro() {
  SharedDtor();
}

void GetSegmentInfoReplyPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void GetSegmentInfoReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentInfoReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentInfoReplyPro_descriptor_;
}

const GetSegmentInfoReplyPro& GetSegmentInfoReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentInfoReplyPro* GetSegmentInfoReplyPro::default_instance_ = NULL;

GetSegmentInfoReplyPro* GetSegmentInfoReplyPro::New() const {
  return new GetSegmentInfoReplyPro;
}

void GetSegmentInfoReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
    segmentsize_ = 0u;
  }
  nodelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentInfoReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_nodeList;
        break;
      }
      
      // repeated fixed32 nodeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nodeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_nodelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_nodelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_nodeList;
        if (input->ExpectTag(24)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutSegmentInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutSegmentInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentInfoReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // repeated fixed32 nodeList = 2;
  for (int i = 0; i < this->nodelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->nodelist(i), output);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 4;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->codingsetting(), output);
  }
  
  // optional fixed32 segmentSize = 5;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->segmentsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentInfoReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // repeated fixed32 nodeList = 2;
  for (int i = 0; i < this->nodelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->nodelist(i), target);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 4;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->codingsetting(), target);
  }
  
  // optional fixed32 segmentSize = 5;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->segmentsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentInfoReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 3;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 4;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
    // optional fixed32 segmentSize = 5;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed32 nodeList = 2;
  {
    int data_size = 0;
    data_size = 4 * this->nodelist_size();
    total_size += 1 * this->nodelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentInfoReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentInfoReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentInfoReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentInfoReplyPro::MergeFrom(const GetSegmentInfoReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodelist_.MergeFrom(from.nodelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentInfoReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentInfoReplyPro::CopyFrom(const GetSegmentInfoReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentInfoReplyPro::IsInitialized() const {
  
  return true;
}

void GetSegmentInfoReplyPro::Swap(GetSegmentInfoReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    nodelist_.Swap(&other->nodelist_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentInfoReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentInfoReplyPro_descriptor_;
  metadata.reflection = GetSegmentInfoReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrimaryListRequestPro::kNumOfObjsFieldNumber;
const int GetPrimaryListRequestPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

GetPrimaryListRequestPro::GetPrimaryListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimaryListRequestPro::InitAsDefaultInstance() {
}

GetPrimaryListRequestPro::GetPrimaryListRequestPro(const GetPrimaryListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimaryListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  numofobjs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimaryListRequestPro::~GetPrimaryListRequestPro() {
  SharedDtor();
}

void GetPrimaryListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrimaryListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimaryListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimaryListRequestPro_descriptor_;
}

const GetPrimaryListRequestPro& GetPrimaryListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetPrimaryListRequestPro* GetPrimaryListRequestPro::default_instance_ = NULL;

GetPrimaryListRequestPro* GetPrimaryListRequestPro::New() const {
  return new GetPrimaryListRequestPro;
}

void GetPrimaryListRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numofobjs_ = 0u;
  }
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimaryListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 numOfObjs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofobjs_)));
          set_has_numofobjs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryList;
        break;
      }
      
      // repeated fixed32 primaryList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimaryListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 numOfObjs = 1;
  if (has_numofobjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->numofobjs(), output);
  }
  
  // repeated fixed32 primaryList = 2;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimaryListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 numOfObjs = 1;
  if (has_numofobjs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->numofobjs(), target);
  }
  
  // repeated fixed32 primaryList = 2;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrimaryListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 numOfObjs = 1;
    if (has_numofobjs()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed32 primaryList = 2;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimaryListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimaryListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrimaryListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimaryListRequestPro::MergeFrom(const GetPrimaryListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  primarylist_.MergeFrom(from.primarylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numofobjs()) {
      set_numofobjs(from.numofobjs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimaryListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimaryListRequestPro::CopyFrom(const GetPrimaryListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimaryListRequestPro::IsInitialized() const {
  
  return true;
}

void GetPrimaryListRequestPro::Swap(GetPrimaryListRequestPro* other) {
  if (other != this) {
    std::swap(numofobjs_, other->numofobjs_);
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimaryListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimaryListRequestPro_descriptor_;
  metadata.reflection = GetPrimaryListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentLocationPro::kSegmentIdFieldNumber;
const int SegmentLocationPro::kPrimaryIdFieldNumber;
const int SegmentLocationPro::kOsdListFieldNumber;
#endif  // !_MSC_VER

SegmentLocationPro::SegmentLocationPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentLocationPro::InitAsDefaultInstance() {
}

SegmentLocationPro::SegmentLocationPro(const SegmentLocationPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentLocationPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  primaryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentLocationPro::~SegmentLocationPro() {
  SharedDtor();
}

void SegmentLocationPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentLocationPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentLocationPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentLocationPro_descriptor_;
}

const SegmentLocationPro& SegmentLocationPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentLocationPro* SegmentLocationPro::default_instance_ = NULL;

SegmentLocationPro* SegmentLocationPro::New() const {
  return new SegmentLocationPro;
}

void SegmentLocationPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    primaryid_ = 0u;
  }
  osdlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentLocationPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryId;
        break;
      }
      
      // optional fixed32 primaryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &primaryid_)));
          set_has_primaryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdList;
        break;
      }
      
      // repeated fixed32 osdList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_osdlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_osdlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentLocationPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 primaryId = 2;
  if (has_primaryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->primaryid(), output);
  }
  
  // repeated fixed32 osdList = 3;
  for (int i = 0; i < this->osdlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->osdlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentLocationPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 primaryId = 2;
  if (has_primaryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->primaryid(), target);
  }
  
  // repeated fixed32 osdList = 3;
  for (int i = 0; i < this->osdlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->osdlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentLocationPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 primaryId = 2;
    if (has_primaryid()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed32 osdList = 3;
  {
    int data_size = 0;
    data_size = 4 * this->osdlist_size();
    total_size += 1 * this->osdlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentLocationPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentLocationPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentLocationPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentLocationPro::MergeFrom(const SegmentLocationPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  osdlist_.MergeFrom(from.osdlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_primaryid()) {
      set_primaryid(from.primaryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentLocationPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentLocationPro::CopyFrom(const SegmentLocationPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentLocationPro::IsInitialized() const {
  
  return true;
}

void SegmentLocationPro::Swap(SegmentLocationPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(primaryid_, other->primaryid_);
    osdlist_.Swap(&other->osdlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentLocationPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentLocationPro_descriptor_;
  metadata.reflection = SegmentLocationPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoveryTriggerReplyPro::kSegmentLocationsFieldNumber;
#endif  // !_MSC_VER

RecoveryTriggerReplyPro::RecoveryTriggerReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoveryTriggerReplyPro::InitAsDefaultInstance() {
}

RecoveryTriggerReplyPro::RecoveryTriggerReplyPro(const RecoveryTriggerReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoveryTriggerReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryTriggerReplyPro::~RecoveryTriggerReplyPro() {
  SharedDtor();
}

void RecoveryTriggerReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoveryTriggerReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryTriggerReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryTriggerReplyPro_descriptor_;
}

const RecoveryTriggerReplyPro& RecoveryTriggerReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RecoveryTriggerReplyPro* RecoveryTriggerReplyPro::default_instance_ = NULL;

RecoveryTriggerReplyPro* RecoveryTriggerReplyPro::New() const {
  return new RecoveryTriggerReplyPro;
}

void RecoveryTriggerReplyPro::Clear() {
  segmentlocations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryTriggerReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.SegmentLocationPro segmentLocations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmentLocations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segmentlocations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_segmentLocations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoveryTriggerReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.SegmentLocationPro segmentLocations = 1;
  for (int i = 0; i < this->segmentlocations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segmentlocations(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoveryTriggerReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.SegmentLocationPro segmentLocations = 1;
  for (int i = 0; i < this->segmentlocations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->segmentlocations(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoveryTriggerReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.SegmentLocationPro segmentLocations = 1;
  total_size += 1 * this->segmentlocations_size();
  for (int i = 0; i < this->segmentlocations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segmentlocations(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryTriggerReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryTriggerReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryTriggerReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryTriggerReplyPro::MergeFrom(const RecoveryTriggerReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmentlocations_.MergeFrom(from.segmentlocations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryTriggerReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryTriggerReplyPro::CopyFrom(const RecoveryTriggerReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryTriggerReplyPro::IsInitialized() const {
  
  return true;
}

void RecoveryTriggerReplyPro::Swap(RecoveryTriggerReplyPro* other) {
  if (other != this) {
    segmentlocations_.Swap(&other->segmentlocations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryTriggerReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryTriggerReplyPro_descriptor_;
  metadata.reflection = RecoveryTriggerReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadSegmentAckPro::kSegmentIdFieldNumber;
const int UploadSegmentAckPro::kCodingSchemeFieldNumber;
const int UploadSegmentAckPro::kCodingSettingFieldNumber;
const int UploadSegmentAckPro::kNodeListFieldNumber;
const int UploadSegmentAckPro::kSegmentSizeFieldNumber;
#endif  // !_MSC_VER

UploadSegmentAckPro::UploadSegmentAckPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadSegmentAckPro::InitAsDefaultInstance() {
}

UploadSegmentAckPro::UploadSegmentAckPro(const UploadSegmentAckPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadSegmentAckPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  segmentsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadSegmentAckPro::~UploadSegmentAckPro() {
  SharedDtor();
}

void UploadSegmentAckPro::SharedDtor() {
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void UploadSegmentAckPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadSegmentAckPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadSegmentAckPro_descriptor_;
}

const UploadSegmentAckPro& UploadSegmentAckPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UploadSegmentAckPro* UploadSegmentAckPro::default_instance_ = NULL;

UploadSegmentAckPro* UploadSegmentAckPro::New() const {
  return new UploadSegmentAckPro;
}

void UploadSegmentAckPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
    segmentsize_ = 0u;
  }
  nodelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadSegmentAckPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutSegmentInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutSegmentInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_nodeList;
        break;
      }
      
      // repeated fixed32 nodeList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nodeList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_nodelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_nodelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_nodeList;
        if (input->ExpectTag(53)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed32 segmentSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadSegmentAckPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 2;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 3;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->codingsetting(), output);
  }
  
  // repeated fixed32 nodeList = 4;
  for (int i = 0; i < this->nodelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->nodelist(i), output);
  }
  
  // optional fixed32 segmentSize = 6;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->segmentsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadSegmentAckPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 2;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 3;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->codingsetting(), target);
  }
  
  // repeated fixed32 nodeList = 4;
  for (int i = 0; i < this->nodelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->nodelist(i), target);
  }
  
  // optional fixed32 segmentSize = 6;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->segmentsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadSegmentAckPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 2;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 3;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
    // optional fixed32 segmentSize = 6;
    if (has_segmentsize()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated fixed32 nodeList = 4;
  {
    int data_size = 0;
    data_size = 4 * this->nodelist_size();
    total_size += 1 * this->nodelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadSegmentAckPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadSegmentAckPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadSegmentAckPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadSegmentAckPro::MergeFrom(const UploadSegmentAckPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodelist_.MergeFrom(from.nodelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadSegmentAckPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadSegmentAckPro::CopyFrom(const UploadSegmentAckPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadSegmentAckPro::IsInitialized() const {
  
  return true;
}

void UploadSegmentAckPro::Swap(UploadSegmentAckPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    nodelist_.Swap(&other->nodelist_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadSegmentAckPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadSegmentAckPro_descriptor_;
  metadata.reflection = UploadSegmentAckPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSegmentInfoRequestPro::kSegmentIdFieldNumber;
const int GetSegmentInfoRequestPro::kOsdIdFieldNumber;
const int GetSegmentInfoRequestPro::kNeedReplyFieldNumber;
const int GetSegmentInfoRequestPro::kIsRecoveryFieldNumber;
#endif  // !_MSC_VER

GetSegmentInfoRequestPro::GetSegmentInfoRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSegmentInfoRequestPro::InitAsDefaultInstance() {
}

GetSegmentInfoRequestPro::GetSegmentInfoRequestPro(const GetSegmentInfoRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSegmentInfoRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  osdid_ = 0u;
  needreply_ = false;
  isrecovery_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSegmentInfoRequestPro::~GetSegmentInfoRequestPro() {
  SharedDtor();
}

void GetSegmentInfoRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSegmentInfoRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSegmentInfoRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSegmentInfoRequestPro_descriptor_;
}

const GetSegmentInfoRequestPro& GetSegmentInfoRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSegmentInfoRequestPro* GetSegmentInfoRequestPro::default_instance_ = NULL;

GetSegmentInfoRequestPro* GetSegmentInfoRequestPro::New() const {
  return new GetSegmentInfoRequestPro;
}

void GetSegmentInfoRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    osdid_ = 0u;
    needreply_ = false;
    isrecovery_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSegmentInfoRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdId;
        break;
      }
      
      // optional fixed32 osdId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needReply;
        break;
      }
      
      // optional bool needReply = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needReply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreply_)));
          set_has_needreply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isRecovery;
        break;
      }
      
      // optional bool isRecovery = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRecovery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecovery_)));
          set_has_isrecovery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSegmentInfoRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 osdId = 2;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdid(), output);
  }
  
  // optional bool needReply = 3;
  if (has_needreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needreply(), output);
  }
  
  // optional bool isRecovery = 4;
  if (has_isrecovery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isrecovery(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSegmentInfoRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 osdId = 2;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdid(), target);
  }
  
  // optional bool needReply = 3;
  if (has_needreply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needreply(), target);
  }
  
  // optional bool isRecovery = 4;
  if (has_isrecovery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isrecovery(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSegmentInfoRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 osdId = 2;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional bool needReply = 3;
    if (has_needreply()) {
      total_size += 1 + 1;
    }
    
    // optional bool isRecovery = 4;
    if (has_isrecovery()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSegmentInfoRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSegmentInfoRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSegmentInfoRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSegmentInfoRequestPro::MergeFrom(const GetSegmentInfoRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_needreply()) {
      set_needreply(from.needreply());
    }
    if (from.has_isrecovery()) {
      set_isrecovery(from.isrecovery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSegmentInfoRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSegmentInfoRequestPro::CopyFrom(const GetSegmentInfoRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmentInfoRequestPro::IsInitialized() const {
  
  return true;
}

void GetSegmentInfoRequestPro::Swap(GetSegmentInfoRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(osdid_, other->osdid_);
    std::swap(needreply_, other->needreply_);
    std::swap(isrecovery_, other->isrecovery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSegmentInfoRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSegmentInfoRequestPro_descriptor_;
  metadata.reflection = GetSegmentInfoRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutSegmentInitReplyPro::kSegmentIdFieldNumber;
const int PutSegmentInitReplyPro::kDataMsgTypeFieldNumber;
#endif  // !_MSC_VER

PutSegmentInitReplyPro::PutSegmentInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutSegmentInitReplyPro::InitAsDefaultInstance() {
}

PutSegmentInitReplyPro::PutSegmentInitReplyPro(const PutSegmentInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutSegmentInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  datamsgtype_ = 15;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutSegmentInitReplyPro::~PutSegmentInitReplyPro() {
  SharedDtor();
}

void PutSegmentInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutSegmentInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutSegmentInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutSegmentInitReplyPro_descriptor_;
}

const PutSegmentInitReplyPro& PutSegmentInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutSegmentInitReplyPro* PutSegmentInitReplyPro::default_instance_ = NULL;

PutSegmentInitReplyPro* PutSegmentInitReplyPro::New() const {
  return new PutSegmentInitReplyPro;
}

void PutSegmentInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    datamsgtype_ = 15;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutSegmentInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutSegmentInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 2;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->datamsgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutSegmentInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 2;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->datamsgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutSegmentInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 2;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutSegmentInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutSegmentInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutSegmentInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutSegmentInitReplyPro::MergeFrom(const PutSegmentInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutSegmentInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutSegmentInitReplyPro::CopyFrom(const PutSegmentInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSegmentInitReplyPro::IsInitialized() const {
  
  return true;
}

void PutSegmentInitReplyPro::Swap(PutSegmentInitReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutSegmentInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutSegmentInitReplyPro_descriptor_;
  metadata.reflection = PutSegmentInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SegmentTransferEndReplyPro::kSegmentIdFieldNumber;
const int SegmentTransferEndReplyPro::kIsSmallSegmentFieldNumber;
#endif  // !_MSC_VER

SegmentTransferEndReplyPro::SegmentTransferEndReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentTransferEndReplyPro::InitAsDefaultInstance() {
}

SegmentTransferEndReplyPro::SegmentTransferEndReplyPro(const SegmentTransferEndReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentTransferEndReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  issmallsegment_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentTransferEndReplyPro::~SegmentTransferEndReplyPro() {
  SharedDtor();
}

void SegmentTransferEndReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentTransferEndReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentTransferEndReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentTransferEndReplyPro_descriptor_;
}

const SegmentTransferEndReplyPro& SegmentTransferEndReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SegmentTransferEndReplyPro* SegmentTransferEndReplyPro::default_instance_ = NULL;

SegmentTransferEndReplyPro* SegmentTransferEndReplyPro::New() const {
  return new SegmentTransferEndReplyPro;
}

void SegmentTransferEndReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    issmallsegment_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentTransferEndReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSmallSegment;
        break;
      }
      
      // optional bool isSmallSegment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSmallSegment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issmallsegment_)));
          set_has_issmallsegment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentTransferEndReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional bool isSmallSegment = 2;
  if (has_issmallsegment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issmallsegment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentTransferEndReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional bool isSmallSegment = 2;
  if (has_issmallsegment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issmallsegment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentTransferEndReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional bool isSmallSegment = 2;
    if (has_issmallsegment()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentTransferEndReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentTransferEndReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentTransferEndReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentTransferEndReplyPro::MergeFrom(const SegmentTransferEndReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_issmallsegment()) {
      set_issmallsegment(from.issmallsegment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentTransferEndReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentTransferEndReplyPro::CopyFrom(const SegmentTransferEndReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentTransferEndReplyPro::IsInitialized() const {
  
  return true;
}

void SegmentTransferEndReplyPro::Swap(SegmentTransferEndReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(issmallsegment_, other->issmallsegment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentTransferEndReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentTransferEndReplyPro_descriptor_;
  metadata.reflection = SegmentTransferEndReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutBlockInitRequestPro::kSegmentIdFieldNumber;
const int PutBlockInitRequestPro::kBlockIdFieldNumber;
const int PutBlockInitRequestPro::kBlockSizeFieldNumber;
const int PutBlockInitRequestPro::kChunkCountFieldNumber;
const int PutBlockInitRequestPro::kDataMsgTypeFieldNumber;
const int PutBlockInitRequestPro::kUpdateKeyFieldNumber;
#endif  // !_MSC_VER

PutBlockInitRequestPro::PutBlockInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutBlockInitRequestPro::InitAsDefaultInstance() {
}

PutBlockInitRequestPro::PutBlockInitRequestPro(const PutBlockInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutBlockInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  blocksize_ = 0u;
  chunkcount_ = 0u;
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutBlockInitRequestPro::~PutBlockInitRequestPro() {
  SharedDtor();
}

void PutBlockInitRequestPro::SharedDtor() {
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (this != default_instance_) {
  }
}

void PutBlockInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutBlockInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutBlockInitRequestPro_descriptor_;
}

const PutBlockInitRequestPro& PutBlockInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutBlockInitRequestPro* PutBlockInitRequestPro::default_instance_ = NULL;

PutBlockInitRequestPro* PutBlockInitRequestPro::New() const {
  return new PutBlockInitRequestPro;
}

void PutBlockInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
    blocksize_ = 0u;
    chunkcount_ = 0u;
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutBlockInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_blockSize;
        break;
      }
      
      // optional fixed32 blockSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutBlockInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  // optional fixed32 blockSize = 3;
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->blocksize(), output);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->chunkcount(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 6;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->updatekey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutBlockInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  // optional fixed32 blockSize = 3;
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->blocksize(), target);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->chunkcount(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 6;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->updatekey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutBlockInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 blockSize = 3;
    if (has_blocksize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 4;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 6;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutBlockInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutBlockInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutBlockInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutBlockInitRequestPro::MergeFrom(const PutBlockInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutBlockInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutBlockInitRequestPro::CopyFrom(const PutBlockInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutBlockInitRequestPro::IsInitialized() const {
  
  return true;
}

void PutBlockInitRequestPro::Swap(PutBlockInitRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    std::swap(blocksize_, other->blocksize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutBlockInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutBlockInitRequestPro_descriptor_;
  metadata.reflection = PutBlockInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockDataPro::kSegmentIdFieldNumber;
const int BlockDataPro::kBlockIdFieldNumber;
const int BlockDataPro::kOffsetFieldNumber;
const int BlockDataPro::kLengthFieldNumber;
const int BlockDataPro::kDataMsgTypeFieldNumber;
const int BlockDataPro::kUpdateKeyFieldNumber;
#endif  // !_MSC_VER

BlockDataPro::BlockDataPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockDataPro::InitAsDefaultInstance() {
}

BlockDataPro::BlockDataPro(const BlockDataPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockDataPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockDataPro::~BlockDataPro() {
  SharedDtor();
}

void BlockDataPro::SharedDtor() {
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (this != default_instance_) {
  }
}

void BlockDataPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockDataPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockDataPro_descriptor_;
}

const BlockDataPro& BlockDataPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BlockDataPro* BlockDataPro::default_instance_ = NULL;

BlockDataPro* BlockDataPro::New() const {
  return new BlockDataPro;
}

void BlockDataPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = 0u;
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockDataPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_offset;
        break;
      }
      
      // optional fixed64 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_length;
        break;
      }
      
      // optional fixed32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockDataPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->offset(), output);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->length(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 6;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->updatekey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockDataPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  // optional fixed64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->offset(), target);
  }
  
  // optional fixed32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->length(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 6;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->updatekey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockDataPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 offset = 3;
    if (has_offset()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 5;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 6;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockDataPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockDataPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockDataPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockDataPro::MergeFrom(const BlockDataPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockDataPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockDataPro::CopyFrom(const BlockDataPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDataPro::IsInitialized() const {
  
  return true;
}

void BlockDataPro::Swap(BlockDataPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockDataPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockDataPro_descriptor_;
  metadata.reflection = BlockDataPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockTransferEndRequestPro::kSegmentIdFieldNumber;
const int BlockTransferEndRequestPro::kBlockIdFieldNumber;
const int BlockTransferEndRequestPro::kDataMsgTypeFieldNumber;
const int BlockTransferEndRequestPro::kUpdateKeyFieldNumber;
const int BlockTransferEndRequestPro::kOffsetLengthFieldNumber;
const int BlockTransferEndRequestPro::kBlockLocationFieldNumber;
const int BlockTransferEndRequestPro::kCodingSchemeFieldNumber;
const int BlockTransferEndRequestPro::kCodingSettingFieldNumber;
const int BlockTransferEndRequestPro::kSegmentSizeFieldNumber;
#endif  // !_MSC_VER

BlockTransferEndRequestPro::BlockTransferEndRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockTransferEndRequestPro::InitAsDefaultInstance() {
}

BlockTransferEndRequestPro::BlockTransferEndRequestPro(const BlockTransferEndRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockTransferEndRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  datamsgtype_ = 15;
  updatekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  codingscheme_ = 1;
  codingsetting_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  segmentsize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockTransferEndRequestPro::~BlockTransferEndRequestPro() {
  SharedDtor();
}

void BlockTransferEndRequestPro::SharedDtor() {
  if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
    delete updatekey_;
  }
  if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
    delete codingsetting_;
  }
  if (this != default_instance_) {
  }
}

void BlockTransferEndRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockTransferEndRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockTransferEndRequestPro_descriptor_;
}

const BlockTransferEndRequestPro& BlockTransferEndRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BlockTransferEndRequestPro* BlockTransferEndRequestPro::default_instance_ = NULL;

BlockTransferEndRequestPro* BlockTransferEndRequestPro::New() const {
  return new BlockTransferEndRequestPro;
}

void BlockTransferEndRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
    datamsgtype_ = 15;
    if (has_updatekey()) {
      if (updatekey_ != &::google::protobuf::internal::kEmptyString) {
        updatekey_->clear();
      }
    }
    codingscheme_ = 1;
    if (has_codingsetting()) {
      if (codingsetting_ != &::google::protobuf::internal::kEmptyString) {
        codingsetting_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    segmentsize_ = GOOGLE_ULONGLONG(0);
  }
  offsetlength_.Clear();
  blocklocation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockTransferEndRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_updateKey;
        break;
      }
      
      // optional string updateKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatekey().data(), this->updatekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_offsetLength;
        break;
      }
      
      // repeated .ncvfs.OffsetLengthPro offsetLength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offsetLength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsetlength()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_offsetLength;
        if (input->ExpectTag(50)) goto parse_blockLocation;
        break;
      }
      
      // repeated .ncvfs.BlockLocationPro blockLocation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blockLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocklocation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_blockLocation;
        if (input->ExpectTag(56)) goto parse_codingScheme;
        break;
      }
      
      // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codingScheme:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::PutSegmentInitRequestPro_CodingScheme_IsValid(value)) {
            set_codingscheme(static_cast< ::ncvfs::PutSegmentInitRequestPro_CodingScheme >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_codingSetting;
        break;
      }
      
      // optional string codingSetting = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codingSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codingsetting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->codingsetting().data(), this->codingsetting().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_segmentSize;
        break;
      }
      
      // optional fixed64 segmentSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentsize_)));
          set_has_segmentsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockTransferEndRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 3;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->datamsgtype(), output);
  }
  
  // optional string updateKey = 4;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->updatekey(), output);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 5;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->offsetlength(i), output);
  }
  
  // repeated .ncvfs.BlockLocationPro blockLocation = 6;
  for (int i = 0; i < this->blocklocation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->blocklocation(i), output);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 7;
  if (has_codingscheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->codingscheme(), output);
  }
  
  // optional string codingSetting = 8;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->codingsetting(), output);
  }
  
  // optional fixed64 segmentSize = 9;
  if (has_segmentsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->segmentsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockTransferEndRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 3;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->datamsgtype(), target);
  }
  
  // optional string updateKey = 4;
  if (has_updatekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatekey().data(), this->updatekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->updatekey(), target);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 5;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->offsetlength(i), target);
  }
  
  // repeated .ncvfs.BlockLocationPro blockLocation = 6;
  for (int i = 0; i < this->blocklocation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->blocklocation(i), target);
  }
  
  // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 7;
  if (has_codingscheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->codingscheme(), target);
  }
  
  // optional string codingSetting = 8;
  if (has_codingsetting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->codingsetting().data(), this->codingsetting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->codingsetting(), target);
  }
  
  // optional fixed64 segmentSize = 9;
  if (has_segmentsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->segmentsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockTransferEndRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 3;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional string updateKey = 4;
    if (has_updatekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatekey());
    }
    
    // optional .ncvfs.PutSegmentInitRequestPro.CodingScheme codingScheme = 7;
    if (has_codingscheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->codingscheme());
    }
    
    // optional string codingSetting = 8;
    if (has_codingsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codingsetting());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 segmentSize = 9;
    if (has_segmentsize()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .ncvfs.OffsetLengthPro offsetLength = 5;
  total_size += 1 * this->offsetlength_size();
  for (int i = 0; i < this->offsetlength_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsetlength(i));
  }
  
  // repeated .ncvfs.BlockLocationPro blockLocation = 6;
  total_size += 1 * this->blocklocation_size();
  for (int i = 0; i < this->blocklocation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocklocation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockTransferEndRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockTransferEndRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockTransferEndRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockTransferEndRequestPro::MergeFrom(const BlockTransferEndRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  offsetlength_.MergeFrom(from.offsetlength_);
  blocklocation_.MergeFrom(from.blocklocation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_updatekey()) {
      set_updatekey(from.updatekey());
    }
    if (from.has_codingscheme()) {
      set_codingscheme(from.codingscheme());
    }
    if (from.has_codingsetting()) {
      set_codingsetting(from.codingsetting());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_segmentsize()) {
      set_segmentsize(from.segmentsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockTransferEndRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockTransferEndRequestPro::CopyFrom(const BlockTransferEndRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTransferEndRequestPro::IsInitialized() const {
  
  return true;
}

void BlockTransferEndRequestPro::Swap(BlockTransferEndRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(updatekey_, other->updatekey_);
    offsetlength_.Swap(&other->offsetlength_);
    blocklocation_.Swap(&other->blocklocation_);
    std::swap(codingscheme_, other->codingscheme_);
    std::swap(codingsetting_, other->codingsetting_);
    std::swap(segmentsize_, other->segmentsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockTransferEndRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockTransferEndRequestPro_descriptor_;
  metadata.reflection = BlockTransferEndRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutBlockInitReplyPro::kSegmentIdFieldNumber;
const int PutBlockInitReplyPro::kBlockIdFieldNumber;
#endif  // !_MSC_VER

PutBlockInitReplyPro::PutBlockInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutBlockInitReplyPro::InitAsDefaultInstance() {
}

PutBlockInitReplyPro::PutBlockInitReplyPro(const PutBlockInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutBlockInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutBlockInitReplyPro::~PutBlockInitReplyPro() {
  SharedDtor();
}

void PutBlockInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutBlockInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutBlockInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutBlockInitReplyPro_descriptor_;
}

const PutBlockInitReplyPro& PutBlockInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

PutBlockInitReplyPro* PutBlockInitReplyPro::default_instance_ = NULL;

PutBlockInitReplyPro* PutBlockInitReplyPro::New() const {
  return new PutBlockInitReplyPro;
}

void PutBlockInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutBlockInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutBlockInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutBlockInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutBlockInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutBlockInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutBlockInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutBlockInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutBlockInitReplyPro::MergeFrom(const PutBlockInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutBlockInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutBlockInitReplyPro::CopyFrom(const PutBlockInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutBlockInitReplyPro::IsInitialized() const {
  
  return true;
}

void PutBlockInitReplyPro::Swap(PutBlockInitReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutBlockInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutBlockInitReplyPro_descriptor_;
  metadata.reflection = PutBlockInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockTransferEndReplyPro::kSegmentIdFieldNumber;
const int BlockTransferEndReplyPro::kBlockIdFieldNumber;
#endif  // !_MSC_VER

BlockTransferEndReplyPro::BlockTransferEndReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockTransferEndReplyPro::InitAsDefaultInstance() {
}

BlockTransferEndReplyPro::BlockTransferEndReplyPro(const BlockTransferEndReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockTransferEndReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockTransferEndReplyPro::~BlockTransferEndReplyPro() {
  SharedDtor();
}

void BlockTransferEndReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockTransferEndReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockTransferEndReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockTransferEndReplyPro_descriptor_;
}

const BlockTransferEndReplyPro& BlockTransferEndReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BlockTransferEndReplyPro* BlockTransferEndReplyPro::default_instance_ = NULL;

BlockTransferEndReplyPro* BlockTransferEndReplyPro::New() const {
  return new BlockTransferEndReplyPro;
}

void BlockTransferEndReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockTransferEndReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockTransferEndReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockTransferEndReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockTransferEndReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockTransferEndReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockTransferEndReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockTransferEndReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockTransferEndReplyPro::MergeFrom(const BlockTransferEndReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockTransferEndReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockTransferEndReplyPro::CopyFrom(const BlockTransferEndReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockTransferEndReplyPro::IsInitialized() const {
  
  return true;
}

void BlockTransferEndReplyPro::Swap(BlockTransferEndReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockTransferEndReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockTransferEndReplyPro_descriptor_;
  metadata.reflection = BlockTransferEndReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlockInitRequestPro::kSegmentIdFieldNumber;
const int GetBlockInitRequestPro::kBlockIdFieldNumber;
const int GetBlockInitRequestPro::kOffsetLengthFieldNumber;
const int GetBlockInitRequestPro::kDataMsgTypeFieldNumber;
const int GetBlockInitRequestPro::kIsParityFieldNumber;
#endif  // !_MSC_VER

GetBlockInitRequestPro::GetBlockInitRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBlockInitRequestPro::InitAsDefaultInstance() {
}

GetBlockInitRequestPro::GetBlockInitRequestPro(const GetBlockInitRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBlockInitRequestPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  datamsgtype_ = 15;
  isparity_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlockInitRequestPro::~GetBlockInitRequestPro() {
  SharedDtor();
}

void GetBlockInitRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlockInitRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlockInitRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlockInitRequestPro_descriptor_;
}

const GetBlockInitRequestPro& GetBlockInitRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetBlockInitRequestPro* GetBlockInitRequestPro::default_instance_ = NULL;

GetBlockInitRequestPro* GetBlockInitRequestPro::New() const {
  return new GetBlockInitRequestPro;
}

void GetBlockInitRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
    datamsgtype_ = 15;
    isparity_ = false;
  }
  offsetlength_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlockInitRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offsetLength;
        break;
      }
      
      // repeated .ncvfs.OffsetLengthPro offsetLength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offsetLength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offsetlength()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offsetLength;
        if (input->ExpectTag(32)) goto parse_dataMsgType;
        break;
      }
      
      // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataMsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ncvfs::DataMsgPro_DataMsgType_IsValid(value)) {
            set_datamsgtype(static_cast< ::ncvfs::DataMsgPro_DataMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isParity;
        break;
      }
      
      // optional bool isParity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isParity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isparity_)));
          set_has_isparity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBlockInitRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 3;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offsetlength(i), output);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
  if (has_datamsgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datamsgtype(), output);
  }
  
  // optional bool isParity = 5;
  if (has_isparity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isparity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBlockInitRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  // repeated .ncvfs.OffsetLengthPro offsetLength = 3;
  for (int i = 0; i < this->offsetlength_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offsetlength(i), target);
  }
  
  // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
  if (has_datamsgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datamsgtype(), target);
  }
  
  // optional bool isParity = 5;
  if (has_isparity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isparity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBlockInitRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
    // optional .ncvfs.DataMsgPro.DataMsgType dataMsgType = 4;
    if (has_datamsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datamsgtype());
    }
    
    // optional bool isParity = 5;
    if (has_isparity()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ncvfs.OffsetLengthPro offsetLength = 3;
  total_size += 1 * this->offsetlength_size();
  for (int i = 0; i < this->offsetlength_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offsetlength(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlockInitRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlockInitRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlockInitRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlockInitRequestPro::MergeFrom(const GetBlockInitRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  offsetlength_.MergeFrom(from.offsetlength_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_datamsgtype()) {
      set_datamsgtype(from.datamsgtype());
    }
    if (from.has_isparity()) {
      set_isparity(from.isparity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlockInitRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockInitRequestPro::CopyFrom(const GetBlockInitRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockInitRequestPro::IsInitialized() const {
  
  return true;
}

void GetBlockInitRequestPro::Swap(GetBlockInitRequestPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    offsetlength_.Swap(&other->offsetlength_);
    std::swap(datamsgtype_, other->datamsgtype_);
    std::swap(isparity_, other->isparity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlockInitRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlockInitRequestPro_descriptor_;
  metadata.reflection = GetBlockInitRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlockInitReplyPro::kSegmentIdFieldNumber;
const int GetBlockInitReplyPro::kBlockIdFieldNumber;
const int GetBlockInitReplyPro::kBlockSizeFieldNumber;
const int GetBlockInitReplyPro::kChunkCountFieldNumber;
#endif  // !_MSC_VER

GetBlockInitReplyPro::GetBlockInitReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBlockInitReplyPro::InitAsDefaultInstance() {
}

GetBlockInitReplyPro::GetBlockInitReplyPro(const GetBlockInitReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBlockInitReplyPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  blockid_ = 0u;
  blocksize_ = 0u;
  chunkcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlockInitReplyPro::~GetBlockInitReplyPro() {
  SharedDtor();
}

void GetBlockInitReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlockInitReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlockInitReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlockInitReplyPro_descriptor_;
}

const GetBlockInitReplyPro& GetBlockInitReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetBlockInitReplyPro* GetBlockInitReplyPro::default_instance_ = NULL;

GetBlockInitReplyPro* GetBlockInitReplyPro::New() const {
  return new GetBlockInitReplyPro;
}

void GetBlockInitReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
    blockid_ = 0u;
    blocksize_ = 0u;
    chunkcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlockInitReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blockId;
        break;
      }
      
      // optional fixed32 blockId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_blockSize;
        break;
      }
      
      // optional fixed32 blockSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chunkCount;
        break;
      }
      
      // optional fixed32 chunkCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chunkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &chunkcount_)));
          set_has_chunkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBlockInitReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->blockid(), output);
  }
  
  // optional fixed32 blockSize = 3;
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->blocksize(), output);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->chunkcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBlockInitReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // optional fixed32 blockId = 2;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->blockid(), target);
  }
  
  // optional fixed32 blockSize = 3;
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->blocksize(), target);
  }
  
  // optional fixed32 chunkCount = 4;
  if (has_chunkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->chunkcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBlockInitReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 blockId = 2;
    if (has_blockid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 blockSize = 3;
    if (has_blocksize()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 chunkCount = 4;
    if (has_chunkcount()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlockInitReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlockInitReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlockInitReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlockInitReplyPro::MergeFrom(const GetBlockInitReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
    if (from.has_chunkcount()) {
      set_chunkcount(from.chunkcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlockInitReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockInitReplyPro::CopyFrom(const GetBlockInitReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockInitReplyPro::IsInitialized() const {
  
  return true;
}

void GetBlockInitReplyPro::Swap(GetBlockInitReplyPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    std::swap(blockid_, other->blockid_);
    std::swap(blocksize_, other->blocksize_);
    std::swap(chunkcount_, other->chunkcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlockInitReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlockInitReplyPro_descriptor_;
  metadata.reflection = GetBlockInitReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdStartupPro::kOsdIdFieldNumber;
const int OsdStartupPro::kOsdCapacityFieldNumber;
const int OsdStartupPro::kOsdLoadingFieldNumber;
const int OsdStartupPro::kOsdIpFieldNumber;
const int OsdStartupPro::kOsdPortFieldNumber;
#endif  // !_MSC_VER

OsdStartupPro::OsdStartupPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStartupPro::InitAsDefaultInstance() {
}

OsdStartupPro::OsdStartupPro(const OsdStartupPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStartupPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  osdcapacity_ = 0u;
  osdloading_ = 0u;
  osdip_ = 0u;
  osdport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStartupPro::~OsdStartupPro() {
  SharedDtor();
}

void OsdStartupPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdStartupPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStartupPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStartupPro_descriptor_;
}

const OsdStartupPro& OsdStartupPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdStartupPro* OsdStartupPro::default_instance_ = NULL;

OsdStartupPro* OsdStartupPro::New() const {
  return new OsdStartupPro;
}

void OsdStartupPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    osdcapacity_ = 0u;
    osdloading_ = 0u;
    osdip_ = 0u;
    osdport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStartupPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdCapacity;
        break;
      }
      
      // optional fixed32 osdCapacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdcapacity_)));
          set_has_osdcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdLoading;
        break;
      }
      
      // optional fixed32 osdLoading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdLoading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdloading_)));
          set_has_osdloading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_osdIp;
        break;
      }
      
      // optional fixed32 osdIp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdip_)));
          set_has_osdip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_osdPort;
        break;
      }
      
      // optional fixed32 osdPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdport_)));
          set_has_osdport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdStartupPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdcapacity(), output);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->osdloading(), output);
  }
  
  // optional fixed32 osdIp = 4;
  if (has_osdip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->osdip(), output);
  }
  
  // optional fixed32 osdPort = 5;
  if (has_osdport()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->osdport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStartupPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdcapacity(), target);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->osdloading(), target);
  }
  
  // optional fixed32 osdIp = 4;
  if (has_osdip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->osdip(), target);
  }
  
  // optional fixed32 osdPort = 5;
  if (has_osdport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->osdport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStartupPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdCapacity = 2;
    if (has_osdcapacity()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdLoading = 3;
    if (has_osdloading()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdIp = 4;
    if (has_osdip()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdPort = 5;
    if (has_osdport()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStartupPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStartupPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStartupPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStartupPro::MergeFrom(const OsdStartupPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_osdcapacity()) {
      set_osdcapacity(from.osdcapacity());
    }
    if (from.has_osdloading()) {
      set_osdloading(from.osdloading());
    }
    if (from.has_osdip()) {
      set_osdip(from.osdip());
    }
    if (from.has_osdport()) {
      set_osdport(from.osdport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStartupPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStartupPro::CopyFrom(const OsdStartupPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStartupPro::IsInitialized() const {
  
  return true;
}

void OsdStartupPro::Swap(OsdStartupPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(osdcapacity_, other->osdcapacity_);
    std::swap(osdloading_, other->osdloading_);
    std::swap(osdip_, other->osdip_);
    std::swap(osdport_, other->osdport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStartupPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStartupPro_descriptor_;
  metadata.reflection = OsdStartupPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdShutdownPro::kOsdIdFieldNumber;
#endif  // !_MSC_VER

OsdShutdownPro::OsdShutdownPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdShutdownPro::InitAsDefaultInstance() {
}

OsdShutdownPro::OsdShutdownPro(const OsdShutdownPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdShutdownPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdShutdownPro::~OsdShutdownPro() {
  SharedDtor();
}

void OsdShutdownPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdShutdownPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdShutdownPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdShutdownPro_descriptor_;
}

const OsdShutdownPro& OsdShutdownPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdShutdownPro* OsdShutdownPro::default_instance_ = NULL;

OsdShutdownPro* OsdShutdownPro::New() const {
  return new OsdShutdownPro;
}

void OsdShutdownPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdShutdownPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdShutdownPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdShutdownPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdShutdownPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdShutdownPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdShutdownPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdShutdownPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdShutdownPro::MergeFrom(const OsdShutdownPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdShutdownPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdShutdownPro::CopyFrom(const OsdShutdownPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdShutdownPro::IsInitialized() const {
  
  return true;
}

void OsdShutdownPro::Swap(OsdShutdownPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdShutdownPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdShutdownPro_descriptor_;
  metadata.reflection = OsdShutdownPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OsdStatUpdateReplyPro::kOsdIdFieldNumber;
const int OsdStatUpdateReplyPro::kOsdCapacityFieldNumber;
const int OsdStatUpdateReplyPro::kOsdLoadingFieldNumber;
#endif  // !_MSC_VER

OsdStatUpdateReplyPro::OsdStatUpdateReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStatUpdateReplyPro::InitAsDefaultInstance() {
}

OsdStatUpdateReplyPro::OsdStatUpdateReplyPro(const OsdStatUpdateReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStatUpdateReplyPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  osdcapacity_ = 0u;
  osdloading_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStatUpdateReplyPro::~OsdStatUpdateReplyPro() {
  SharedDtor();
}

void OsdStatUpdateReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdStatUpdateReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStatUpdateReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStatUpdateReplyPro_descriptor_;
}

const OsdStatUpdateReplyPro& OsdStatUpdateReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdStatUpdateReplyPro* OsdStatUpdateReplyPro::default_instance_ = NULL;

OsdStatUpdateReplyPro* OsdStatUpdateReplyPro::New() const {
  return new OsdStatUpdateReplyPro;
}

void OsdStatUpdateReplyPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    osdcapacity_ = 0u;
    osdloading_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStatUpdateReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdCapacity;
        break;
      }
      
      // optional fixed32 osdCapacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdcapacity_)));
          set_has_osdcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdLoading;
        break;
      }
      
      // optional fixed32 osdLoading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdLoading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdloading_)));
          set_has_osdloading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OsdStatUpdateReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdcapacity(), output);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->osdloading(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStatUpdateReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 osdCapacity = 2;
  if (has_osdcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdcapacity(), target);
  }
  
  // optional fixed32 osdLoading = 3;
  if (has_osdloading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->osdloading(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStatUpdateReplyPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdCapacity = 2;
    if (has_osdcapacity()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdLoading = 3;
    if (has_osdloading()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStatUpdateReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStatUpdateReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStatUpdateReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStatUpdateReplyPro::MergeFrom(const OsdStatUpdateReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_osdcapacity()) {
      set_osdcapacity(from.osdcapacity());
    }
    if (from.has_osdloading()) {
      set_osdloading(from.osdloading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStatUpdateReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStatUpdateReplyPro::CopyFrom(const OsdStatUpdateReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStatUpdateReplyPro::IsInitialized() const {
  
  return true;
}

void OsdStatUpdateReplyPro::Swap(OsdStatUpdateReplyPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(osdcapacity_, other->osdcapacity_);
    std::swap(osdloading_, other->osdloading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStatUpdateReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStatUpdateReplyPro_descriptor_;
  metadata.reflection = OsdStatUpdateReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSecondaryListRequestPro::kNumOfSegsFieldNumber;
const int GetSecondaryListRequestPro::kPrimaryIdFieldNumber;
const int GetSecondaryListRequestPro::kBlockSizeFieldNumber;
#endif  // !_MSC_VER

GetSecondaryListRequestPro::GetSecondaryListRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSecondaryListRequestPro::InitAsDefaultInstance() {
}

GetSecondaryListRequestPro::GetSecondaryListRequestPro(const GetSecondaryListRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSecondaryListRequestPro::SharedCtor() {
  _cached_size_ = 0;
  numofsegs_ = 0u;
  primaryid_ = 0u;
  blocksize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSecondaryListRequestPro::~GetSecondaryListRequestPro() {
  SharedDtor();
}

void GetSecondaryListRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSecondaryListRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSecondaryListRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSecondaryListRequestPro_descriptor_;
}

const GetSecondaryListRequestPro& GetSecondaryListRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSecondaryListRequestPro* GetSecondaryListRequestPro::default_instance_ = NULL;

GetSecondaryListRequestPro* GetSecondaryListRequestPro::New() const {
  return new GetSecondaryListRequestPro;
}

void GetSecondaryListRequestPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numofsegs_ = 0u;
    primaryid_ = 0u;
    blocksize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSecondaryListRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 numOfSegs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &numofsegs_)));
          set_has_numofsegs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryId;
        break;
      }
      
      // optional fixed32 primaryId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &primaryid_)));
          set_has_primaryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_blockSize;
        break;
      }
      
      // optional fixed64 blockSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_blockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSecondaryListRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 numOfSegs = 1;
  if (has_numofsegs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->numofsegs(), output);
  }
  
  // optional fixed32 primaryId = 2;
  if (has_primaryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->primaryid(), output);
  }
  
  // optional fixed64 blockSize = 3;
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->blocksize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSecondaryListRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 numOfSegs = 1;
  if (has_numofsegs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->numofsegs(), target);
  }
  
  // optional fixed32 primaryId = 2;
  if (has_primaryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->primaryid(), target);
  }
  
  // optional fixed64 blockSize = 3;
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->blocksize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSecondaryListRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 numOfSegs = 1;
    if (has_numofsegs()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 primaryId = 2;
    if (has_primaryid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 blockSize = 3;
    if (has_blocksize()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSecondaryListRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSecondaryListRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSecondaryListRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSecondaryListRequestPro::MergeFrom(const GetSecondaryListRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numofsegs()) {
      set_numofsegs(from.numofsegs());
    }
    if (from.has_primaryid()) {
      set_primaryid(from.primaryid());
    }
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSecondaryListRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecondaryListRequestPro::CopyFrom(const GetSecondaryListRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecondaryListRequestPro::IsInitialized() const {
  
  return true;
}

void GetSecondaryListRequestPro::Swap(GetSecondaryListRequestPro* other) {
  if (other != this) {
    std::swap(numofsegs_, other->numofsegs_);
    std::swap(primaryid_, other->primaryid_);
    std::swap(blocksize_, other->blocksize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSecondaryListRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSecondaryListRequestPro_descriptor_;
  metadata.reflection = GetSecondaryListRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OsdStatUpdateRequestPro::OsdStatUpdateRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OsdStatUpdateRequestPro::InitAsDefaultInstance() {
}

OsdStatUpdateRequestPro::OsdStatUpdateRequestPro(const OsdStatUpdateRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OsdStatUpdateRequestPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OsdStatUpdateRequestPro::~OsdStatUpdateRequestPro() {
  SharedDtor();
}

void OsdStatUpdateRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OsdStatUpdateRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OsdStatUpdateRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OsdStatUpdateRequestPro_descriptor_;
}

const OsdStatUpdateRequestPro& OsdStatUpdateRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OsdStatUpdateRequestPro* OsdStatUpdateRequestPro::default_instance_ = NULL;

OsdStatUpdateRequestPro* OsdStatUpdateRequestPro::New() const {
  return new OsdStatUpdateRequestPro;
}

void OsdStatUpdateRequestPro::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OsdStatUpdateRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OsdStatUpdateRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OsdStatUpdateRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OsdStatUpdateRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OsdStatUpdateRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OsdStatUpdateRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OsdStatUpdateRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OsdStatUpdateRequestPro::MergeFrom(const OsdStatUpdateRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OsdStatUpdateRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStatUpdateRequestPro::CopyFrom(const OsdStatUpdateRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStatUpdateRequestPro::IsInitialized() const {
  
  return true;
}

void OsdStatUpdateRequestPro::Swap(OsdStatUpdateRequestPro* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OsdStatUpdateRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OsdStatUpdateRequestPro_descriptor_;
  metadata.reflection = OsdStatUpdateRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSecondaryListReplyPro::kSecondaryListFieldNumber;
#endif  // !_MSC_VER

GetSecondaryListReplyPro::GetSecondaryListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSecondaryListReplyPro::InitAsDefaultInstance() {
}

GetSecondaryListReplyPro::GetSecondaryListReplyPro(const GetSecondaryListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSecondaryListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSecondaryListReplyPro::~GetSecondaryListReplyPro() {
  SharedDtor();
}

void GetSecondaryListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSecondaryListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSecondaryListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSecondaryListReplyPro_descriptor_;
}

const GetSecondaryListReplyPro& GetSecondaryListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetSecondaryListReplyPro* GetSecondaryListReplyPro::default_instance_ = NULL;

GetSecondaryListReplyPro* GetSecondaryListReplyPro::New() const {
  return new GetSecondaryListReplyPro;
}

void GetSecondaryListReplyPro::Clear() {
  secondarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSecondaryListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.BlockLocationPro secondaryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondaryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondarylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_secondaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSecondaryListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.BlockLocationPro secondaryList = 1;
  for (int i = 0; i < this->secondarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->secondarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSecondaryListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.BlockLocationPro secondaryList = 1;
  for (int i = 0; i < this->secondarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->secondarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSecondaryListReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.BlockLocationPro secondaryList = 1;
  total_size += 1 * this->secondarylist_size();
  for (int i = 0; i < this->secondarylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondarylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSecondaryListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSecondaryListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSecondaryListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSecondaryListReplyPro::MergeFrom(const GetSecondaryListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  secondarylist_.MergeFrom(from.secondarylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSecondaryListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecondaryListReplyPro::CopyFrom(const GetSecondaryListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecondaryListReplyPro::IsInitialized() const {
  
  return true;
}

void GetSecondaryListReplyPro::Swap(GetSecondaryListReplyPro* other) {
  if (other != this) {
    secondarylist_.Swap(&other->secondarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSecondaryListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSecondaryListReplyPro_descriptor_;
  metadata.reflection = GetSecondaryListReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewOsdRegisterPro::kOsdIdFieldNumber;
const int NewOsdRegisterPro::kOsdIpFieldNumber;
const int NewOsdRegisterPro::kOsdPortFieldNumber;
#endif  // !_MSC_VER

NewOsdRegisterPro::NewOsdRegisterPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewOsdRegisterPro::InitAsDefaultInstance() {
}

NewOsdRegisterPro::NewOsdRegisterPro(const NewOsdRegisterPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewOsdRegisterPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  osdip_ = 0u;
  osdport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewOsdRegisterPro::~NewOsdRegisterPro() {
  SharedDtor();
}

void NewOsdRegisterPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewOsdRegisterPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewOsdRegisterPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewOsdRegisterPro_descriptor_;
}

const NewOsdRegisterPro& NewOsdRegisterPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

NewOsdRegisterPro* NewOsdRegisterPro::default_instance_ = NULL;

NewOsdRegisterPro* NewOsdRegisterPro::New() const {
  return new NewOsdRegisterPro;
}

void NewOsdRegisterPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    osdip_ = 0u;
    osdport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewOsdRegisterPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdIp;
        break;
      }
      
      // optional fixed32 osdIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdip_)));
          set_has_osdip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdPort;
        break;
      }
      
      // optional fixed32 osdPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdport_)));
          set_has_osdport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewOsdRegisterPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 osdIp = 2;
  if (has_osdip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdip(), output);
  }
  
  // optional fixed32 osdPort = 3;
  if (has_osdport()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->osdport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewOsdRegisterPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 osdIp = 2;
  if (has_osdip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdip(), target);
  }
  
  // optional fixed32 osdPort = 3;
  if (has_osdport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->osdport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewOsdRegisterPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdIp = 2;
    if (has_osdip()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdPort = 3;
    if (has_osdport()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewOsdRegisterPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewOsdRegisterPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewOsdRegisterPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewOsdRegisterPro::MergeFrom(const NewOsdRegisterPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_osdip()) {
      set_osdip(from.osdip());
    }
    if (from.has_osdport()) {
      set_osdport(from.osdport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewOsdRegisterPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOsdRegisterPro::CopyFrom(const NewOsdRegisterPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOsdRegisterPro::IsInitialized() const {
  
  return true;
}

void NewOsdRegisterPro::Swap(NewOsdRegisterPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(osdip_, other->osdip_);
    std::swap(osdport_, other->osdport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewOsdRegisterPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewOsdRegisterPro_descriptor_;
  metadata.reflection = NewOsdRegisterPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineOsdPro::kOsdIdFieldNumber;
const int OnlineOsdPro::kOsdIpFieldNumber;
const int OnlineOsdPro::kOsdPortFieldNumber;
#endif  // !_MSC_VER

OnlineOsdPro::OnlineOsdPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineOsdPro::InitAsDefaultInstance() {
}

OnlineOsdPro::OnlineOsdPro(const OnlineOsdPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineOsdPro::SharedCtor() {
  _cached_size_ = 0;
  osdid_ = 0u;
  osdip_ = 0u;
  osdport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineOsdPro::~OnlineOsdPro() {
  SharedDtor();
}

void OnlineOsdPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineOsdPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineOsdPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineOsdPro_descriptor_;
}

const OnlineOsdPro& OnlineOsdPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OnlineOsdPro* OnlineOsdPro::default_instance_ = NULL;

OnlineOsdPro* OnlineOsdPro::New() const {
  return new OnlineOsdPro;
}

void OnlineOsdPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    osdid_ = 0u;
    osdip_ = 0u;
    osdport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineOsdPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 osdId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdid_)));
          set_has_osdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_osdIp;
        break;
      }
      
      // optional fixed32 osdIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdip_)));
          set_has_osdip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_osdPort;
        break;
      }
      
      // optional fixed32 osdPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &osdport_)));
          set_has_osdport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineOsdPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->osdid(), output);
  }
  
  // optional fixed32 osdIp = 2;
  if (has_osdip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->osdip(), output);
  }
  
  // optional fixed32 osdPort = 3;
  if (has_osdport()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->osdport(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineOsdPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 osdId = 1;
  if (has_osdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->osdid(), target);
  }
  
  // optional fixed32 osdIp = 2;
  if (has_osdip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->osdip(), target);
  }
  
  // optional fixed32 osdPort = 3;
  if (has_osdport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->osdport(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineOsdPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 osdId = 1;
    if (has_osdid()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdIp = 2;
    if (has_osdip()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 osdPort = 3;
    if (has_osdport()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineOsdPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineOsdPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineOsdPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineOsdPro::MergeFrom(const OnlineOsdPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osdid()) {
      set_osdid(from.osdid());
    }
    if (from.has_osdip()) {
      set_osdip(from.osdip());
    }
    if (from.has_osdport()) {
      set_osdport(from.osdport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineOsdPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineOsdPro::CopyFrom(const OnlineOsdPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineOsdPro::IsInitialized() const {
  
  return true;
}

void OnlineOsdPro::Swap(OnlineOsdPro* other) {
  if (other != this) {
    std::swap(osdid_, other->osdid_);
    std::swap(osdip_, other->osdip_);
    std::swap(osdport_, other->osdport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineOsdPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineOsdPro_descriptor_;
  metadata.reflection = OnlineOsdPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineOsdListPro::kOnlineOsdListFieldNumber;
#endif  // !_MSC_VER

OnlineOsdListPro::OnlineOsdListPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineOsdListPro::InitAsDefaultInstance() {
}

OnlineOsdListPro::OnlineOsdListPro(const OnlineOsdListPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineOsdListPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineOsdListPro::~OnlineOsdListPro() {
  SharedDtor();
}

void OnlineOsdListPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineOsdListPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineOsdListPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineOsdListPro_descriptor_;
}

const OnlineOsdListPro& OnlineOsdListPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

OnlineOsdListPro* OnlineOsdListPro::default_instance_ = NULL;

OnlineOsdListPro* OnlineOsdListPro::New() const {
  return new OnlineOsdListPro;
}

void OnlineOsdListPro::Clear() {
  onlineosdlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineOsdListPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlineOsdList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlineosdlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_onlineOsdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineOsdListPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
  for (int i = 0; i < this->onlineosdlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->onlineosdlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineOsdListPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
  for (int i = 0; i < this->onlineosdlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->onlineosdlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineOsdListPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
  total_size += 1 * this->onlineosdlist_size();
  for (int i = 0; i < this->onlineosdlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlineosdlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineOsdListPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineOsdListPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineOsdListPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineOsdListPro::MergeFrom(const OnlineOsdListPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlineosdlist_.MergeFrom(from.onlineosdlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineOsdListPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineOsdListPro::CopyFrom(const OnlineOsdListPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineOsdListPro::IsInitialized() const {
  
  return true;
}

void OnlineOsdListPro::Swap(OnlineOsdListPro* other) {
  if (other != this) {
    onlineosdlist_.Swap(&other->onlineosdlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineOsdListPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineOsdListPro_descriptor_;
  metadata.reflection = OnlineOsdListPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOsdStatusRequestPro::kOsdIdsFieldNumber;
#endif  // !_MSC_VER

GetOsdStatusRequestPro::GetOsdStatusRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOsdStatusRequestPro::InitAsDefaultInstance() {
}

GetOsdStatusRequestPro::GetOsdStatusRequestPro(const GetOsdStatusRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOsdStatusRequestPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOsdStatusRequestPro::~GetOsdStatusRequestPro() {
  SharedDtor();
}

void GetOsdStatusRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOsdStatusRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOsdStatusRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOsdStatusRequestPro_descriptor_;
}

const GetOsdStatusRequestPro& GetOsdStatusRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetOsdStatusRequestPro* GetOsdStatusRequestPro::default_instance_ = NULL;

GetOsdStatusRequestPro* GetOsdStatusRequestPro::New() const {
  return new GetOsdStatusRequestPro;
}

void GetOsdStatusRequestPro::Clear() {
  osdids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOsdStatusRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 osdIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_osdids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_osdids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_osdIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOsdStatusRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 osdIds = 1;
  for (int i = 0; i < this->osdids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->osdids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOsdStatusRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 osdIds = 1;
  for (int i = 0; i < this->osdids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->osdids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOsdStatusRequestPro::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed32 osdIds = 1;
  {
    int data_size = 0;
    data_size = 4 * this->osdids_size();
    total_size += 1 * this->osdids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOsdStatusRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOsdStatusRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOsdStatusRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOsdStatusRequestPro::MergeFrom(const GetOsdStatusRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  osdids_.MergeFrom(from.osdids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOsdStatusRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOsdStatusRequestPro::CopyFrom(const GetOsdStatusRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOsdStatusRequestPro::IsInitialized() const {
  
  return true;
}

void GetOsdStatusRequestPro::Swap(GetOsdStatusRequestPro* other) {
  if (other != this) {
    osdids_.Swap(&other->osdids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOsdStatusRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOsdStatusRequestPro_descriptor_;
  metadata.reflection = GetOsdStatusRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOsdStatusReplyPro::kOsdStatusFieldNumber;
#endif  // !_MSC_VER

GetOsdStatusReplyPro::GetOsdStatusReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOsdStatusReplyPro::InitAsDefaultInstance() {
}

GetOsdStatusReplyPro::GetOsdStatusReplyPro(const GetOsdStatusReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOsdStatusReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOsdStatusReplyPro::~GetOsdStatusReplyPro() {
  SharedDtor();
}

void GetOsdStatusReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOsdStatusReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOsdStatusReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOsdStatusReplyPro_descriptor_;
}

const GetOsdStatusReplyPro& GetOsdStatusReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetOsdStatusReplyPro* GetOsdStatusReplyPro::default_instance_ = NULL;

GetOsdStatusReplyPro* GetOsdStatusReplyPro::New() const {
  return new GetOsdStatusReplyPro;
}

void GetOsdStatusReplyPro::Clear() {
  osdstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOsdStatusReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool osdStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_osdStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_osdstatus())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_osdstatus())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_osdStatus;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOsdStatusReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool osdStatus = 1;
  for (int i = 0; i < this->osdstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->osdstatus(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOsdStatusReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool osdStatus = 1;
  for (int i = 0; i < this->osdstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->osdstatus(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOsdStatusReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated bool osdStatus = 1;
  {
    int data_size = 0;
    data_size = 1 * this->osdstatus_size();
    total_size += 1 * this->osdstatus_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOsdStatusReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOsdStatusReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOsdStatusReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOsdStatusReplyPro::MergeFrom(const GetOsdStatusReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  osdstatus_.MergeFrom(from.osdstatus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOsdStatusReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOsdStatusReplyPro::CopyFrom(const GetOsdStatusReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOsdStatusReplyPro::IsInitialized() const {
  
  return true;
}

void GetOsdStatusReplyPro::Swap(GetOsdStatusReplyPro* other) {
  if (other != this) {
    osdstatus_.Swap(&other->osdstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOsdStatusReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOsdStatusReplyPro_descriptor_;
  metadata.reflection = GetOsdStatusReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepairSegmentInfoPro::kSegmentIdFieldNumber;
const int RepairSegmentInfoPro::kDeadBlockIdsFieldNumber;
const int RepairSegmentInfoPro::kNewOsdIdsFieldNumber;
#endif  // !_MSC_VER

RepairSegmentInfoPro::RepairSegmentInfoPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RepairSegmentInfoPro::InitAsDefaultInstance() {
}

RepairSegmentInfoPro::RepairSegmentInfoPro(const RepairSegmentInfoPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RepairSegmentInfoPro::SharedCtor() {
  _cached_size_ = 0;
  segmentid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepairSegmentInfoPro::~RepairSegmentInfoPro() {
  SharedDtor();
}

void RepairSegmentInfoPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepairSegmentInfoPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepairSegmentInfoPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepairSegmentInfoPro_descriptor_;
}

const RepairSegmentInfoPro& RepairSegmentInfoPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RepairSegmentInfoPro* RepairSegmentInfoPro::default_instance_ = NULL;

RepairSegmentInfoPro* RepairSegmentInfoPro::New() const {
  return new RepairSegmentInfoPro;
}

void RepairSegmentInfoPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    segmentid_ = GOOGLE_ULONGLONG(0);
  }
  deadblockids_.Clear();
  newosdids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepairSegmentInfoPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 segmentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_deadBlockIds;
        break;
      }
      
      // repeated fixed32 deadBlockIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_deadBlockIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_deadblockids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_deadblockids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_deadBlockIds;
        if (input->ExpectTag(29)) goto parse_newOsdIds;
        break;
      }
      
      // repeated fixed32 newOsdIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_newOsdIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_newosdids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_newosdids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_newOsdIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RepairSegmentInfoPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->segmentid(), output);
  }
  
  // repeated fixed32 deadBlockIds = 2;
  for (int i = 0; i < this->deadblockids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->deadblockids(i), output);
  }
  
  // repeated fixed32 newOsdIds = 3;
  for (int i = 0; i < this->newosdids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->newosdids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RepairSegmentInfoPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 segmentId = 1;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->segmentid(), target);
  }
  
  // repeated fixed32 deadBlockIds = 2;
  for (int i = 0; i < this->deadblockids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->deadblockids(i), target);
  }
  
  // repeated fixed32 newOsdIds = 3;
  for (int i = 0; i < this->newosdids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->newosdids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RepairSegmentInfoPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 segmentId = 1;
    if (has_segmentid()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated fixed32 deadBlockIds = 2;
  {
    int data_size = 0;
    data_size = 4 * this->deadblockids_size();
    total_size += 1 * this->deadblockids_size() + data_size;
  }
  
  // repeated fixed32 newOsdIds = 3;
  {
    int data_size = 0;
    data_size = 4 * this->newosdids_size();
    total_size += 1 * this->newosdids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepairSegmentInfoPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepairSegmentInfoPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepairSegmentInfoPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepairSegmentInfoPro::MergeFrom(const RepairSegmentInfoPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  deadblockids_.MergeFrom(from.deadblockids_);
  newosdids_.MergeFrom(from.newosdids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepairSegmentInfoPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepairSegmentInfoPro::CopyFrom(const RepairSegmentInfoPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepairSegmentInfoPro::IsInitialized() const {
  
  return true;
}

void RepairSegmentInfoPro::Swap(RepairSegmentInfoPro* other) {
  if (other != this) {
    std::swap(segmentid_, other->segmentid_);
    deadblockids_.Swap(&other->deadblockids_);
    newosdids_.Swap(&other->newosdids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepairSegmentInfoPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepairSegmentInfoPro_descriptor_;
  metadata.reflection = RepairSegmentInfoPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPrimaryListReplyPro::kPrimaryListFieldNumber;
#endif  // !_MSC_VER

GetPrimaryListReplyPro::GetPrimaryListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPrimaryListReplyPro::InitAsDefaultInstance() {
}

GetPrimaryListReplyPro::GetPrimaryListReplyPro(const GetPrimaryListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPrimaryListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPrimaryListReplyPro::~GetPrimaryListReplyPro() {
  SharedDtor();
}

void GetPrimaryListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPrimaryListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPrimaryListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPrimaryListReplyPro_descriptor_;
}

const GetPrimaryListReplyPro& GetPrimaryListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetPrimaryListReplyPro* GetPrimaryListReplyPro::default_instance_ = NULL;

GetPrimaryListReplyPro* GetPrimaryListReplyPro::New() const {
  return new GetPrimaryListReplyPro;
}

void GetPrimaryListReplyPro::Clear() {
  primarylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPrimaryListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 primaryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_primarylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_primarylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_primaryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPrimaryListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 primaryList = 1;
  for (int i = 0; i < this->primarylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->primarylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPrimaryListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 primaryList = 1;
  for (int i = 0; i < this->primarylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->primarylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPrimaryListReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed32 primaryList = 1;
  {
    int data_size = 0;
    data_size = 4 * this->primarylist_size();
    total_size += 1 * this->primarylist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPrimaryListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPrimaryListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPrimaryListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPrimaryListReplyPro::MergeFrom(const GetPrimaryListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  primarylist_.MergeFrom(from.primarylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPrimaryListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPrimaryListReplyPro::CopyFrom(const GetPrimaryListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPrimaryListReplyPro::IsInitialized() const {
  
  return true;
}

void GetPrimaryListReplyPro::Swap(GetPrimaryListReplyPro* other) {
  if (other != this) {
    primarylist_.Swap(&other->primarylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPrimaryListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPrimaryListReplyPro_descriptor_;
  metadata.reflection = GetPrimaryListReplyPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoveryTriggerRequestPro::kOsdListFieldNumber;
const int RecoveryTriggerRequestPro::kDstOsdListFieldNumber;
const int RecoveryTriggerRequestPro::kDstspecifiedFieldNumber;
#endif  // !_MSC_VER

RecoveryTriggerRequestPro::RecoveryTriggerRequestPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoveryTriggerRequestPro::InitAsDefaultInstance() {
}

RecoveryTriggerRequestPro::RecoveryTriggerRequestPro(const RecoveryTriggerRequestPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoveryTriggerRequestPro::SharedCtor() {
  _cached_size_ = 0;
  dstspecified_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoveryTriggerRequestPro::~RecoveryTriggerRequestPro() {
  SharedDtor();
}

void RecoveryTriggerRequestPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoveryTriggerRequestPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoveryTriggerRequestPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoveryTriggerRequestPro_descriptor_;
}

const RecoveryTriggerRequestPro& RecoveryTriggerRequestPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RecoveryTriggerRequestPro* RecoveryTriggerRequestPro::default_instance_ = NULL;

RecoveryTriggerRequestPro* RecoveryTriggerRequestPro::New() const {
  return new RecoveryTriggerRequestPro;
}

void RecoveryTriggerRequestPro::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    dstspecified_ = false;
  }
  osdlist_.Clear();
  dstosdlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoveryTriggerRequestPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 osdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_osdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13, input, this->mutable_osdlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_osdlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_osdList;
        if (input->ExpectTag(21)) goto parse_dstOsdList;
        break;
      }
      
      // repeated fixed32 dstOsdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dstOsdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_dstosdlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_dstosdlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dstOsdList;
        if (input->ExpectTag(24)) goto parse_dstspecified;
        break;
      }
      
      // optional bool dstspecified = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstspecified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dstspecified_)));
          set_has_dstspecified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoveryTriggerRequestPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed32 osdList = 1;
  for (int i = 0; i < this->osdlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->osdlist(i), output);
  }
  
  // repeated fixed32 dstOsdList = 2;
  for (int i = 0; i < this->dstosdlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->dstosdlist(i), output);
  }
  
  // optional bool dstspecified = 3;
  if (has_dstspecified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dstspecified(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoveryTriggerRequestPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed32 osdList = 1;
  for (int i = 0; i < this->osdlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->osdlist(i), target);
  }
  
  // repeated fixed32 dstOsdList = 2;
  for (int i = 0; i < this->dstosdlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->dstosdlist(i), target);
  }
  
  // optional bool dstspecified = 3;
  if (has_dstspecified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dstspecified(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoveryTriggerRequestPro::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool dstspecified = 3;
    if (has_dstspecified()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated fixed32 osdList = 1;
  {
    int data_size = 0;
    data_size = 4 * this->osdlist_size();
    total_size += 1 * this->osdlist_size() + data_size;
  }
  
  // repeated fixed32 dstOsdList = 2;
  {
    int data_size = 0;
    data_size = 4 * this->dstosdlist_size();
    total_size += 1 * this->dstosdlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoveryTriggerRequestPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoveryTriggerRequestPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoveryTriggerRequestPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoveryTriggerRequestPro::MergeFrom(const RecoveryTriggerRequestPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  osdlist_.MergeFrom(from.osdlist_);
  dstosdlist_.MergeFrom(from.dstosdlist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dstspecified()) {
      set_dstspecified(from.dstspecified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoveryTriggerRequestPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryTriggerRequestPro::CopyFrom(const RecoveryTriggerRequestPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryTriggerRequestPro::IsInitialized() const {
  
  return true;
}

void RecoveryTriggerRequestPro::Swap(RecoveryTriggerRequestPro* other) {
  if (other != this) {
    osdlist_.Swap(&other->osdlist_);
    dstosdlist_.Swap(&other->dstosdlist_);
    std::swap(dstspecified_, other->dstspecified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoveryTriggerRequestPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoveryTriggerRequestPro_descriptor_;
  metadata.reflection = RecoveryTriggerRequestPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOsdListReplyPro::kOnlineOsdListFieldNumber;
#endif  // !_MSC_VER

GetOsdListReplyPro::GetOsdListReplyPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOsdListReplyPro::InitAsDefaultInstance() {
}

GetOsdListReplyPro::GetOsdListReplyPro(const GetOsdListReplyPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOsdListReplyPro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOsdListReplyPro::~GetOsdListReplyPro() {
  SharedDtor();
}

void GetOsdListReplyPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOsdListReplyPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOsdListReplyPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOsdListReplyPro_descriptor_;
}

const GetOsdListReplyPro& GetOsdListReplyPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GetOsdListReplyPro* GetOsdListReplyPro::default_instance_ = NULL;

GetOsdListReplyPro* GetOsdListReplyPro::New() const {
  return new GetOsdListReplyPro;
}

void GetOsdListReplyPro::Clear() {
  onlineosdlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOsdListReplyPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlineOsdList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlineosdlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_onlineOsdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOsdListReplyPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
  for (int i = 0; i < this->onlineosdlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->onlineosdlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOsdListReplyPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
  for (int i = 0; i < this->onlineosdlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->onlineosdlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOsdListReplyPro::ByteSize() const {
  int total_size = 0;
  
  // repeated .ncvfs.OnlineOsdPro onlineOsdList = 1;
  total_size += 1 * this->onlineosdlist_size();
  for (int i = 0; i < this->onlineosdlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlineosdlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOsdListReplyPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOsdListReplyPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOsdListReplyPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOsdListReplyPro::MergeFrom(const GetOsdListReplyPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlineosdlist_.MergeFrom(from.onlineosdlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOsdListReplyPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOsdListReplyPro::CopyFrom(const GetOsdListReplyPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOsdListReplyPro::IsInitialized() const {
  
  return true;
}

void GetOsdListReplyPro::Swap(GetOsdListReplyPro* other) {
  if (other != this) {
    onlineosdlist_.Swap(&other->onlineosdlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOsdListReplyPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOsdListReplyPro_descriptor_;
  metadata.reflection = GetOsdListReplyPro_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ncvfs

// @@protoc_insertion_point(global_scope)
